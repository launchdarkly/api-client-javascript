/**
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.1
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ApprovalRequest', 'model/ApprovalRequestApplyConfigBody', 'model/ApprovalRequestConfigBody', 'model/ApprovalRequestReviewConfigBody', 'model/ApprovalRequests', 'model/FeatureFlag', 'model/FeatureFlagBody', 'model/FeatureFlagCopyBody', 'model/FeatureFlagScheduledChange', 'model/FeatureFlagScheduledChanges', 'model/FeatureFlagScheduledChangesConflicts', 'model/FeatureFlagStatus', 'model/FeatureFlagStatusAcrossEnvironments', 'model/FeatureFlagStatuses', 'model/FeatureFlags', 'model/FlagConfigScheduledChangesConflictsBody', 'model/FlagConfigScheduledChangesPatchBody', 'model/FlagConfigScheduledChangesPostBody', 'model/PatchComment', 'model/UsageError', 'model/UserTargetingExpirationForFlags'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ApprovalRequest'), require('../model/ApprovalRequestApplyConfigBody'), require('../model/ApprovalRequestConfigBody'), require('../model/ApprovalRequestReviewConfigBody'), require('../model/ApprovalRequests'), require('../model/FeatureFlag'), require('../model/FeatureFlagBody'), require('../model/FeatureFlagCopyBody'), require('../model/FeatureFlagScheduledChange'), require('../model/FeatureFlagScheduledChanges'), require('../model/FeatureFlagScheduledChangesConflicts'), require('../model/FeatureFlagStatus'), require('../model/FeatureFlagStatusAcrossEnvironments'), require('../model/FeatureFlagStatuses'), require('../model/FeatureFlags'), require('../model/FlagConfigScheduledChangesConflictsBody'), require('../model/FlagConfigScheduledChangesPatchBody'), require('../model/FlagConfigScheduledChangesPostBody'), require('../model/PatchComment'), require('../model/UsageError'), require('../model/UserTargetingExpirationForFlags'));
  } else {
    // Browser globals (root is window)
    if (!root.LaunchDarklyApi) {
      root.LaunchDarklyApi = {};
    }
    root.LaunchDarklyApi.FeatureFlagsApi = factory(root.LaunchDarklyApi.ApiClient, root.LaunchDarklyApi.ApprovalRequest, root.LaunchDarklyApi.ApprovalRequestApplyConfigBody, root.LaunchDarklyApi.ApprovalRequestConfigBody, root.LaunchDarklyApi.ApprovalRequestReviewConfigBody, root.LaunchDarklyApi.ApprovalRequests, root.LaunchDarklyApi.FeatureFlag, root.LaunchDarklyApi.FeatureFlagBody, root.LaunchDarklyApi.FeatureFlagCopyBody, root.LaunchDarklyApi.FeatureFlagScheduledChange, root.LaunchDarklyApi.FeatureFlagScheduledChanges, root.LaunchDarklyApi.FeatureFlagScheduledChangesConflicts, root.LaunchDarklyApi.FeatureFlagStatus, root.LaunchDarklyApi.FeatureFlagStatusAcrossEnvironments, root.LaunchDarklyApi.FeatureFlagStatuses, root.LaunchDarklyApi.FeatureFlags, root.LaunchDarklyApi.FlagConfigScheduledChangesConflictsBody, root.LaunchDarklyApi.FlagConfigScheduledChangesPatchBody, root.LaunchDarklyApi.FlagConfigScheduledChangesPostBody, root.LaunchDarklyApi.PatchComment, root.LaunchDarklyApi.UsageError, root.LaunchDarklyApi.UserTargetingExpirationForFlags);
  }
}(this, function(ApiClient, ApprovalRequest, ApprovalRequestApplyConfigBody, ApprovalRequestConfigBody, ApprovalRequestReviewConfigBody, ApprovalRequests, FeatureFlag, FeatureFlagBody, FeatureFlagCopyBody, FeatureFlagScheduledChange, FeatureFlagScheduledChanges, FeatureFlagScheduledChangesConflicts, FeatureFlagStatus, FeatureFlagStatusAcrossEnvironments, FeatureFlagStatuses, FeatureFlags, FlagConfigScheduledChangesConflictsBody, FlagConfigScheduledChangesPatchBody, FlagConfigScheduledChangesPostBody, PatchComment, UsageError, UserTargetingExpirationForFlags) {
  'use strict';

  /**
   * FeatureFlags service.
   * @module api/FeatureFlagsApi
   * @version 5.0.1
   */

  /**
   * Constructs a new FeatureFlagsApi. 
   * @alias module:api/FeatureFlagsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the copyFeatureFlag operation.
     * @callback module:api/FeatureFlagsApi~copyFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copies the feature flag configuration from one environment to the same feature flag in another environment.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:model/FeatureFlagCopyBody} featureFlagCopyBody Copy feature flag configurations between environments.
     * @param {module:api/FeatureFlagsApi~copyFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlag}
     */
    this.copyFeatureFlag = function(projectKey, featureFlagKey, featureFlagCopyBody, callback) {
      var postBody = featureFlagCopyBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling copyFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling copyFeatureFlag");
      }

      // verify the required parameter 'featureFlagCopyBody' is set
      if (featureFlagCopyBody === undefined || featureFlagCopyBody === null) {
        throw new Error("Missing the required parameter 'featureFlagCopyBody' when calling copyFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlag;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}/copy', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteApprovalRequest operation.
     * @callback module:api/FeatureFlagsApi~deleteApprovalRequestCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an approval request for a feature flag config
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} approvalRequestId The approval request ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ApprovalRequestConfigBody} opts.approvalRequestConfigBody Create a new approval request
     * @param {module:api/FeatureFlagsApi~deleteApprovalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteApprovalRequest = function(projectKey, environmentKey, featureFlagKey, approvalRequestId, opts, callback) {
      opts = opts || {};
      var postBody = opts['approvalRequestConfigBody'];

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling deleteApprovalRequest");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling deleteApprovalRequest");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling deleteApprovalRequest");
      }

      // verify the required parameter 'approvalRequestId' is set
      if (approvalRequestId === undefined || approvalRequestId === null) {
        throw new Error("Missing the required parameter 'approvalRequestId' when calling deleteApprovalRequest");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey,
        'featureFlagKey': featureFlagKey,
        'approvalRequestId': approvalRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFeatureFlag operation.
     * @callback module:api/FeatureFlagsApi~deleteFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:api/FeatureFlagsApi~deleteFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFeatureFlag = function(projectKey, featureFlagKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling deleteFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling deleteFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFlagConfigScheduledChanges operation.
     * @callback module:api/FeatureFlagsApi~deleteFlagConfigScheduledChangesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a scheduled change on a feature flag in an environment.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} scheduledChangeId The id of the scheduled change
     * @param {module:api/FeatureFlagsApi~deleteFlagConfigScheduledChangesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteFlagConfigScheduledChanges = function(projectKey, featureFlagKey, environmentKey, scheduledChangeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling deleteFlagConfigScheduledChanges");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling deleteFlagConfigScheduledChanges");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling deleteFlagConfigScheduledChanges");
      }

      // verify the required parameter 'scheduledChangeId' is set
      if (scheduledChangeId === undefined || scheduledChangeId === null) {
        throw new Error("Missing the required parameter 'scheduledChangeId' when calling deleteFlagConfigScheduledChanges");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'scheduledChangeId': scheduledChangeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApprovalRequest operation.
     * @callback module:api/FeatureFlagsApi~getApprovalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single approval request for a feature flag config
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} approvalRequestId The approval request ID
     * @param {module:api/FeatureFlagsApi~getApprovalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRequests}
     */
    this.getApprovalRequest = function(projectKey, featureFlagKey, environmentKey, approvalRequestId, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getApprovalRequest");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getApprovalRequest");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getApprovalRequest");
      }

      // verify the required parameter 'approvalRequestId' is set
      if (approvalRequestId === undefined || approvalRequestId === null) {
        throw new Error("Missing the required parameter 'approvalRequestId' when calling getApprovalRequest");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'approvalRequestId': approvalRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRequests;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getApprovalRequests operation.
     * @callback module:api/FeatureFlagsApi~getApprovalRequestsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all approval requests for a feature flag config
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {module:api/FeatureFlagsApi~getApprovalRequestsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRequests}
     */
    this.getApprovalRequests = function(projectKey, featureFlagKey, environmentKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getApprovalRequests");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getApprovalRequests");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getApprovalRequests");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRequests;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getExpiringUserTargets operation.
     * @callback module:api/FeatureFlagsApi~getExpiringUserTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserTargetingExpirationForFlags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get expiring user targets for feature flag
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:api/FeatureFlagsApi~getExpiringUserTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserTargetingExpirationForFlags}
     */
    this.getExpiringUserTargets = function(projectKey, environmentKey, featureFlagKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getExpiringUserTargets");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getExpiringUserTargets");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getExpiringUserTargets");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserTargetingExpirationForFlags;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlag operation.
     * @callback module:api/FeatureFlagsApi~getFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a single feature flag by key.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.env By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {module:api/FeatureFlagsApi~getFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlag}
     */
    this.getFeatureFlag = function(projectKey, featureFlagKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
        'env': {
          value: opts['env'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlag;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlagStatus operation.
     * @callback module:api/FeatureFlagsApi~getFeatureFlagStatusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagStatus} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status for a particular feature flag.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:api/FeatureFlagsApi~getFeatureFlagStatusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagStatus}
     */
    this.getFeatureFlagStatus = function(projectKey, environmentKey, featureFlagKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlagStatus");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFeatureFlagStatus");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFeatureFlagStatus");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagStatus;

      return this.apiClient.callApi(
        '/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlagStatusAcrossEnvironments operation.
     * @callback module:api/FeatureFlagsApi~getFeatureFlagStatusAcrossEnvironmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagStatusAcrossEnvironments} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the status for a particular feature flag across environments
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:api/FeatureFlagsApi~getFeatureFlagStatusAcrossEnvironmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagStatusAcrossEnvironments}
     */
    this.getFeatureFlagStatusAcrossEnvironments = function(projectKey, featureFlagKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlagStatusAcrossEnvironments");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFeatureFlagStatusAcrossEnvironments");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagStatusAcrossEnvironments;

      return this.apiClient.callApi(
        '/flag-status/{projectKey}/{featureFlagKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlagStatuses operation.
     * @callback module:api/FeatureFlagsApi~getFeatureFlagStatusesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagStatuses} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {module:api/FeatureFlagsApi~getFeatureFlagStatusesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagStatuses}
     */
    this.getFeatureFlagStatuses = function(projectKey, environmentKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlagStatuses");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFeatureFlagStatuses");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagStatuses;

      return this.apiClient.callApi(
        '/flag-statuses/{projectKey}/{environmentKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeatureFlags operation.
     * @callback module:api/FeatureFlagsApi~getFeatureFlagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a list of all features in the given project.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} opts.env By default, each feature will include configurations for each environment. You can filter environments with the env query parameter. For example, setting env&#x3D;[\&quot;production\&quot;] will restrict the returned configurations to just your production environment.
     * @param {Boolean} opts.summary By default in api version &gt;&#x3D; 1, flags will _not_ include their list of prerequisites, targets or rules.  Set summary&#x3D;0 to include these fields for each flag returned.
     * @param {Boolean} opts.archived When set to 1, only archived flags will be included in the list of flags returned.  By default, archived flags are not included in the list of flags.
     * @param {Number} opts.limit The number of objects to return. Defaults to -1, which returns everything.
     * @param {Number} opts.offset Where to start in the list. This is for use with pagination. For example, an offset of 10 would skip the first 10 items and then return the next limit items.
     * @param {String} opts.filter A comma-separated list of filters. Each filter is of the form field:value.
     * @param {String} opts.sort A comma-separated list of fields to sort by. A field prefixed by a - will be sorted in descending order.
     * @param {String} opts.tag Filter by tag. A tag can be used to group flags across projects.
     * @param {module:api/FeatureFlagsApi~getFeatureFlagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlags}
     */
    this.getFeatureFlags = function(projectKey, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFeatureFlags");
      }


      var pathParams = {
        'projectKey': projectKey
      };
      var queryParams = {
        'summary': opts['summary'],
        'archived': opts['archived'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'filter': opts['filter'],
        'sort': opts['sort'],
        'tag': opts['tag'],
      };
      var collectionQueryParams = {
        'env': {
          value: opts['env'],
          collectionFormat: 'multi'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlags;

      return this.apiClient.callApi(
        '/flags/{projectKey}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlagConfigScheduledChange operation.
     * @callback module:api/FeatureFlagsApi~getFlagConfigScheduledChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagScheduledChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a scheduled change on a feature flag by id.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} scheduledChangeId The id of the scheduled change
     * @param {module:api/FeatureFlagsApi~getFlagConfigScheduledChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagScheduledChange}
     */
    this.getFlagConfigScheduledChange = function(projectKey, featureFlagKey, environmentKey, scheduledChangeId, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFlagConfigScheduledChange");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFlagConfigScheduledChange");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFlagConfigScheduledChange");
      }

      // verify the required parameter 'scheduledChangeId' is set
      if (scheduledChangeId === undefined || scheduledChangeId === null) {
        throw new Error("Missing the required parameter 'scheduledChangeId' when calling getFlagConfigScheduledChange");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'scheduledChangeId': scheduledChangeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagScheduledChange;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlagConfigScheduledChanges operation.
     * @callback module:api/FeatureFlagsApi~getFlagConfigScheduledChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagScheduledChanges} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all scheduled workflows for a feature flag by key.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {module:api/FeatureFlagsApi~getFlagConfigScheduledChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagScheduledChanges}
     */
    this.getFlagConfigScheduledChanges = function(projectKey, featureFlagKey, environmentKey, callback) {
      var postBody = null;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFlagConfigScheduledChanges");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFlagConfigScheduledChanges");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFlagConfigScheduledChanges");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagScheduledChanges;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getFlagConfigScheduledChangesConflicts operation.
     * @callback module:api/FeatureFlagsApi~getFlagConfigScheduledChangesConflictsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagScheduledChangesConflicts} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {module:model/FlagConfigScheduledChangesConflictsBody} flagConfigScheduledChangesConflictsBody Used to determine if a semantic patch will result in conflicts with scheduled changes on a feature flag.
     * @param {module:api/FeatureFlagsApi~getFlagConfigScheduledChangesConflictsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagScheduledChangesConflicts}
     */
    this.getFlagConfigScheduledChangesConflicts = function(projectKey, featureFlagKey, environmentKey, flagConfigScheduledChangesConflictsBody, callback) {
      var postBody = flagConfigScheduledChangesConflictsBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling getFlagConfigScheduledChangesConflicts");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling getFlagConfigScheduledChangesConflicts");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling getFlagConfigScheduledChangesConflicts");
      }

      // verify the required parameter 'flagConfigScheduledChangesConflictsBody' is set
      if (flagConfigScheduledChangesConflictsBody === undefined || flagConfigScheduledChangesConflictsBody === null) {
        throw new Error("Missing the required parameter 'flagConfigScheduledChangesConflictsBody' when calling getFlagConfigScheduledChangesConflicts");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagScheduledChangesConflicts;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchExpiringUserTargets operation.
     * @callback module:api/FeatureFlagsApi~patchExpiringUserTargetsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserTargetingExpirationForFlags} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update, add, or delete expiring user targets on feature flag
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {Object} semanticPatchWithComment Requires a Semantic Patch representation of the desired changes to the resource. &#39;https://apidocs.launchdarkly.com/reference#updates-via-semantic-patches&#39;. The addition of comments is also supported.
     * @param {module:api/FeatureFlagsApi~patchExpiringUserTargetsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserTargetingExpirationForFlags}
     */
    this.patchExpiringUserTargets = function(projectKey, environmentKey, featureFlagKey, semanticPatchWithComment, callback) {
      var postBody = semanticPatchWithComment;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling patchExpiringUserTargets");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling patchExpiringUserTargets");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling patchExpiringUserTargets");
      }

      // verify the required parameter 'semanticPatchWithComment' is set
      if (semanticPatchWithComment === undefined || semanticPatchWithComment === null) {
        throw new Error("Missing the required parameter 'semanticPatchWithComment' when calling patchExpiringUserTargets");
      }


      var pathParams = {
        'projectKey': projectKey,
        'environmentKey': environmentKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserTargetingExpirationForFlags;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFeatureFlag operation.
     * @callback module:api/FeatureFlagsApi~patchFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform a partial update to a feature.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:model/PatchComment} patchComment Requires a JSON Patch representation of the desired changes to the project, and an optional comment. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.
     * @param {module:api/FeatureFlagsApi~patchFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlag}
     */
    this.patchFeatureFlag = function(projectKey, featureFlagKey, patchComment, callback) {
      var postBody = patchComment;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling patchFeatureFlag");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling patchFeatureFlag");
      }

      // verify the required parameter 'patchComment' is set
      if (patchComment === undefined || patchComment === null) {
        throw new Error("Missing the required parameter 'patchComment' when calling patchFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlag;

      return this.apiClient.callApi(
        '/flags/{projectKey}/{featureFlagKey}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the patchFlagConfigScheduledChange operation.
     * @callback module:api/FeatureFlagsApi~patchFlagConfigScheduledChangeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagScheduledChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an existing scheduled-change on a feature flag in an environment.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {module:model/FlagConfigScheduledChangesPatchBody} flagConfigScheduledChangesPatchBody Update scheduled changes on a feature flag.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} scheduledChangeId The id of the scheduled change
     * @param {module:api/FeatureFlagsApi~patchFlagConfigScheduledChangeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagScheduledChange}
     */
    this.patchFlagConfigScheduledChange = function(projectKey, featureFlagKey, flagConfigScheduledChangesPatchBody, environmentKey, scheduledChangeId, callback) {
      var postBody = flagConfigScheduledChangesPatchBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling patchFlagConfigScheduledChange");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling patchFlagConfigScheduledChange");
      }

      // verify the required parameter 'flagConfigScheduledChangesPatchBody' is set
      if (flagConfigScheduledChangesPatchBody === undefined || flagConfigScheduledChangesPatchBody === null) {
        throw new Error("Missing the required parameter 'flagConfigScheduledChangesPatchBody' when calling patchFlagConfigScheduledChange");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling patchFlagConfigScheduledChange");
      }

      // verify the required parameter 'scheduledChangeId' is set
      if (scheduledChangeId === undefined || scheduledChangeId === null) {
        throw new Error("Missing the required parameter 'scheduledChangeId' when calling patchFlagConfigScheduledChange");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'scheduledChangeId': scheduledChangeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagScheduledChange;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApplyApprovalRequest operation.
     * @callback module:api/FeatureFlagsApi~postApplyApprovalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Apply approval request for a feature flag config
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} approvalRequestId The approval request ID
     * @param {module:model/ApprovalRequestApplyConfigBody} approvalRequestApplyConfigBody Apply an approval request
     * @param {module:api/FeatureFlagsApi~postApplyApprovalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRequests}
     */
    this.postApplyApprovalRequest = function(projectKey, featureFlagKey, environmentKey, approvalRequestId, approvalRequestApplyConfigBody, callback) {
      var postBody = approvalRequestApplyConfigBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling postApplyApprovalRequest");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling postApplyApprovalRequest");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling postApplyApprovalRequest");
      }

      // verify the required parameter 'approvalRequestId' is set
      if (approvalRequestId === undefined || approvalRequestId === null) {
        throw new Error("Missing the required parameter 'approvalRequestId' when calling postApplyApprovalRequest");
      }

      // verify the required parameter 'approvalRequestApplyConfigBody' is set
      if (approvalRequestApplyConfigBody === undefined || approvalRequestApplyConfigBody === null) {
        throw new Error("Missing the required parameter 'approvalRequestApplyConfigBody' when calling postApplyApprovalRequest");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'approvalRequestId': approvalRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRequests;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postApprovalRequest operation.
     * @callback module:api/FeatureFlagsApi~postApprovalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRequest} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create an approval request for a feature flag config
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} approvalRequestId The approval request ID
     * @param {Object} opts Optional parameters
     * @param {module:model/ApprovalRequestConfigBody} opts.approvalRequestConfigBody Create a new approval request
     * @param {module:api/FeatureFlagsApi~postApprovalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRequest}
     */
    this.postApprovalRequest = function(projectKey, featureFlagKey, environmentKey, approvalRequestId, opts, callback) {
      opts = opts || {};
      var postBody = opts['approvalRequestConfigBody'];

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling postApprovalRequest");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling postApprovalRequest");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling postApprovalRequest");
      }

      // verify the required parameter 'approvalRequestId' is set
      if (approvalRequestId === undefined || approvalRequestId === null) {
        throw new Error("Missing the required parameter 'approvalRequestId' when calling postApprovalRequest");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'approvalRequestId': approvalRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRequest;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFeatureFlag operation.
     * @callback module:api/FeatureFlagsApi~postFeatureFlagCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlag} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new feature flag.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {module:model/FeatureFlagBody} featureFlagBody Create a new feature flag.
     * @param {Object} opts Optional parameters
     * @param {String} opts.clone The key of the feature flag to be cloned. The key identifies the flag in your code.  For example, setting clone&#x3D;flagKey will copy the full targeting configuration for all environments (including on/off state) from the original flag to the new flag.
     * @param {module:api/FeatureFlagsApi~postFeatureFlagCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlag}
     */
    this.postFeatureFlag = function(projectKey, featureFlagBody, opts, callback) {
      opts = opts || {};
      var postBody = featureFlagBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling postFeatureFlag");
      }

      // verify the required parameter 'featureFlagBody' is set
      if (featureFlagBody === undefined || featureFlagBody === null) {
        throw new Error("Missing the required parameter 'featureFlagBody' when calling postFeatureFlag");
      }


      var pathParams = {
        'projectKey': projectKey
      };
      var queryParams = {
        'clone': opts['clone'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlag;

      return this.apiClient.callApi(
        '/flags/{projectKey}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postFlagConfigScheduledChanges operation.
     * @callback module:api/FeatureFlagsApi~postFlagConfigScheduledChangesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeatureFlagScheduledChange} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new scheduled change for a feature flag.
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {module:model/FlagConfigScheduledChangesPostBody} flagConfigScheduledChangesPostBody Create scheduled changes on a feature flag.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {module:api/FeatureFlagsApi~postFlagConfigScheduledChangesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeatureFlagScheduledChange}
     */
    this.postFlagConfigScheduledChanges = function(projectKey, flagConfigScheduledChangesPostBody, featureFlagKey, environmentKey, callback) {
      var postBody = flagConfigScheduledChangesPostBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling postFlagConfigScheduledChanges");
      }

      // verify the required parameter 'flagConfigScheduledChangesPostBody' is set
      if (flagConfigScheduledChangesPostBody === undefined || flagConfigScheduledChangesPostBody === null) {
        throw new Error("Missing the required parameter 'flagConfigScheduledChangesPostBody' when calling postFlagConfigScheduledChanges");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling postFlagConfigScheduledChanges");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling postFlagConfigScheduledChanges");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FeatureFlagScheduledChange;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postReviewApprovalRequest operation.
     * @callback module:api/FeatureFlagsApi~postReviewApprovalRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApprovalRequests} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Review approval request for a feature flag config
     * @param {String} projectKey The project key, used to tie the flags together under one project so they can be managed together.
     * @param {String} featureFlagKey The feature flag&#39;s key. The key identifies the flag in your code.
     * @param {String} environmentKey The environment key, used to tie together flag configuration and users under one environment so they can be managed together.
     * @param {String} approvalRequestId The approval request ID
     * @param {module:model/ApprovalRequestReviewConfigBody} approvalRequestReviewConfigBody Review an approval request
     * @param {module:api/FeatureFlagsApi~postReviewApprovalRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApprovalRequests}
     */
    this.postReviewApprovalRequest = function(projectKey, featureFlagKey, environmentKey, approvalRequestId, approvalRequestReviewConfigBody, callback) {
      var postBody = approvalRequestReviewConfigBody;

      // verify the required parameter 'projectKey' is set
      if (projectKey === undefined || projectKey === null) {
        throw new Error("Missing the required parameter 'projectKey' when calling postReviewApprovalRequest");
      }

      // verify the required parameter 'featureFlagKey' is set
      if (featureFlagKey === undefined || featureFlagKey === null) {
        throw new Error("Missing the required parameter 'featureFlagKey' when calling postReviewApprovalRequest");
      }

      // verify the required parameter 'environmentKey' is set
      if (environmentKey === undefined || environmentKey === null) {
        throw new Error("Missing the required parameter 'environmentKey' when calling postReviewApprovalRequest");
      }

      // verify the required parameter 'approvalRequestId' is set
      if (approvalRequestId === undefined || approvalRequestId === null) {
        throw new Error("Missing the required parameter 'approvalRequestId' when calling postReviewApprovalRequest");
      }

      // verify the required parameter 'approvalRequestReviewConfigBody' is set
      if (approvalRequestReviewConfigBody === undefined || approvalRequestReviewConfigBody === null) {
        throw new Error("Missing the required parameter 'approvalRequestReviewConfigBody' when calling postReviewApprovalRequest");
      }


      var pathParams = {
        'projectKey': projectKey,
        'featureFlagKey': featureFlagKey,
        'environmentKey': environmentKey,
        'approvalRequestId': approvalRequestId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Token'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ApprovalRequests;

      return this.apiClient.callApi(
        '/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
