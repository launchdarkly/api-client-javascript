/**
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 3.10.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/FeatureFlagChangeRequestReview', 'model/FeatureFlagChangeRequestReviewStatus', 'model/Id', 'model/SemanticPatchInstruction'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./FeatureFlagChangeRequestReview'), require('./FeatureFlagChangeRequestReviewStatus'), require('./Id'), require('./SemanticPatchInstruction'));
  } else {
    // Browser globals (root is window)
    if (!root.LaunchDarklyApi) {
      root.LaunchDarklyApi = {};
    }
    root.LaunchDarklyApi.FeatureFlagChangeRequest = factory(root.LaunchDarklyApi.ApiClient, root.LaunchDarklyApi.FeatureFlagChangeRequestReview, root.LaunchDarklyApi.FeatureFlagChangeRequestReviewStatus, root.LaunchDarklyApi.Id, root.LaunchDarklyApi.SemanticPatchInstruction);
  }
}(this, function(ApiClient, FeatureFlagChangeRequestReview, FeatureFlagChangeRequestReviewStatus, Id, SemanticPatchInstruction) {
  'use strict';




  /**
   * The FeatureFlagChangeRequest model module.
   * @module model/FeatureFlagChangeRequest
   * @version 3.10.0
   */

  /**
   * Constructs a new <code>FeatureFlagChangeRequest</code>.
   * @alias module:model/FeatureFlagChangeRequest
   * @class
   */
  var exports = function() {
    var _this = this;













  };

  /**
   * Constructs a <code>FeatureFlagChangeRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/FeatureFlagChangeRequest} obj Optional instance to populate.
   * @return {module:model/FeatureFlagChangeRequest} The populated <code>FeatureFlagChangeRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('_id')) {
        obj['_id'] = Id.constructFromObject(data['_id']);
      }
      if (data.hasOwnProperty('_version')) {
        obj['_version'] = ApiClient.convertToType(data['_version'], 'Number');
      }
      if (data.hasOwnProperty('creationDate')) {
        obj['creationDate'] = ApiClient.convertToType(data['creationDate'], 'Number');
      }
      if (data.hasOwnProperty('requestorId')) {
        obj['requestorId'] = ApiClient.convertToType(data['requestorId'], 'String');
      }
      if (data.hasOwnProperty('reviewStatus')) {
        obj['reviewStatus'] = FeatureFlagChangeRequestReviewStatus.constructFromObject(data['reviewStatus']);
      }
      if (data.hasOwnProperty('status')) {
        obj['status'] = ApiClient.convertToType(data['status'], 'String');
      }
      if (data.hasOwnProperty('appliedByMemberID')) {
        obj['appliedByMemberID'] = ApiClient.convertToType(data['appliedByMemberID'], 'String');
      }
      if (data.hasOwnProperty('appliedDate')) {
        obj['appliedDate'] = ApiClient.convertToType(data['appliedDate'], 'Number');
      }
      if (data.hasOwnProperty('currentReviewsByMemberId')) {
        obj['currentReviewsByMemberId'] = FeatureFlagChangeRequestReview.constructFromObject(data['currentReviewsByMemberId']);
      }
      if (data.hasOwnProperty('allReviews')) {
        obj['allReviews'] = ApiClient.convertToType(data['allReviews'], [FeatureFlagChangeRequestReview]);
      }
      if (data.hasOwnProperty('notifyMemberIds')) {
        obj['notifyMemberIds'] = ApiClient.convertToType(data['notifyMemberIds'], ['String']);
      }
      if (data.hasOwnProperty('instructions')) {
        obj['instructions'] = SemanticPatchInstruction.constructFromObject(data['instructions']);
      }
    }
    return obj;
  }

  /**
   * @member {module:model/Id} _id
   */
  exports.prototype['_id'] = undefined;
  /**
   * @member {Number} _version
   */
  exports.prototype['_version'] = undefined;
  /**
   * A unix epoch time in milliseconds specifying the date the change request was requested
   * @member {Number} creationDate
   */
  exports.prototype['creationDate'] = undefined;
  /**
   * The id of the member that requested the change
   * @member {String} requestorId
   */
  exports.prototype['requestorId'] = undefined;
  /**
   * @member {module:model/FeatureFlagChangeRequestReviewStatus} reviewStatus
   */
  exports.prototype['reviewStatus'] = undefined;
  /**
   * | Name     | Description | | --------:| ----------- | | pending  | the feature flag change request has not been applied yet | | completed| the feature flag change request has been applied successfully | | failed   | the feature flag change request has been applied but the changes were not applied successfully | 
   * @member {module:model/FeatureFlagChangeRequest.StatusEnum} status
   */
  exports.prototype['status'] = undefined;
  /**
   * The id of the member that applied the change request
   * @member {String} appliedByMemberID
   */
  exports.prototype['appliedByMemberID'] = undefined;
  /**
   * A unix epoch time in milliseconds specifying the date the change request was applied
   * @member {Number} appliedDate
   */
  exports.prototype['appliedDate'] = undefined;
  /**
   * @member {module:model/FeatureFlagChangeRequestReview} currentReviewsByMemberId
   */
  exports.prototype['currentReviewsByMemberId'] = undefined;
  /**
   * @member {Array.<module:model/FeatureFlagChangeRequestReview>} allReviews
   */
  exports.prototype['allReviews'] = undefined;
  /**
   * @member {Array.<String>} notifyMemberIds
   */
  exports.prototype['notifyMemberIds'] = undefined;
  /**
   * @member {module:model/SemanticPatchInstruction} instructions
   */
  exports.prototype['instructions'] = undefined;


  /**
   * Allowed values for the <code>status</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StatusEnum = {
    /**
     * value: "pending"
     * @const
     */
    "pending": "pending",
    /**
     * value: "completed"
     * @const
     */
    "completed": "completed",
    /**
     * value: "failed"
     * @const
     */
    "failed": "failed"  };


  return exports;
}));


