/**
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 4.0.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.LaunchDarklyApi) {
      root.LaunchDarklyApi = {};
    }
    root.LaunchDarklyApi.EnvironmentApprovalSettings = factory(root.LaunchDarklyApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The EnvironmentApprovalSettings model module.
   * @module model/EnvironmentApprovalSettings
   * @version 4.0.0
   */

  /**
   * Constructs a new <code>EnvironmentApprovalSettings</code>.
   * Approval settings for an environment. Only appears if the approvals feature is enabled.
   * @alias module:model/EnvironmentApprovalSettings
   * @class
   */
  var exports = function() {
    var _this = this;






  };

  /**
   * Constructs a <code>EnvironmentApprovalSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EnvironmentApprovalSettings} obj Optional instance to populate.
   * @return {module:model/EnvironmentApprovalSettings} The populated <code>EnvironmentApprovalSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('serviceKind')) {
        obj['serviceKind'] = ApiClient.convertToType(data['serviceKind'], 'String');
      }
      if (data.hasOwnProperty('required')) {
        obj['required'] = ApiClient.convertToType(data['required'], 'Boolean');
      }
      if (data.hasOwnProperty('canReviewOwnRequest')) {
        obj['canReviewOwnRequest'] = ApiClient.convertToType(data['canReviewOwnRequest'], 'Boolean');
      }
      if (data.hasOwnProperty('minNumApprovals')) {
        obj['minNumApprovals'] = ApiClient.convertToType(data['minNumApprovals'], 'Number');
      }
      if (data.hasOwnProperty('canApplyDeclinedChanges')) {
        obj['canApplyDeclinedChanges'] = ApiClient.convertToType(data['canApplyDeclinedChanges'], 'Boolean');
      }
    }
    return obj;
  }

  /**
   * The approvals system used.
   * @member {module:model/EnvironmentApprovalSettings.ServiceKindEnum} serviceKind
   */
  exports.prototype['serviceKind'] = undefined;
  /**
   * Whether any changes to flags in this environment will require approval.
   * @member {Boolean} required
   */
  exports.prototype['required'] = undefined;
  /**
   * Whether requesters can approve or decline their own request. They may always comment.
   * @member {Boolean} canReviewOwnRequest
   */
  exports.prototype['canReviewOwnRequest'] = undefined;
  /**
   * The number of approvals required before an approval request can be applied.
   * @member {Number} minNumApprovals
   */
  exports.prototype['minNumApprovals'] = undefined;
  /**
   * Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.
   * @member {Boolean} canApplyDeclinedChanges
   */
  exports.prototype['canApplyDeclinedChanges'] = undefined;


  /**
   * Allowed values for the <code>serviceKind</code> property.
   * @enum {String}
   * @readonly
   */
  exports.ServiceKindEnum = {
    /**
     * value: "launchdarkly"
     * @const
     */
    "launchdarkly": "launchdarkly",
    /**
     * value: "service-now"
     * @const
     */
    "service-now": "service-now"  };


  return exports;
}));


