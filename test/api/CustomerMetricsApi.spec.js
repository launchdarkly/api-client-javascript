/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.2
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.CustomerMetricsApi();
  });

  describe('(package)', function() {
    describe('CustomerMetricsApi', function() {
      describe('getEvaluations', function() {
        it('should call getEvaluations successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvaluations call and complete the assertions
          /*
          var envId = "envId_example";
          var flagKey = "flagKey_example";

          instance.getEvaluations(envId, flagKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.StreamSDKVersion);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamBySDKLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
            {
              let dataCtr = data.sdkVersions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamSDKVersionData);
                expect(data.sdk).to.be.a('string');
                expect(data.sdk).to.be("ruby");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("5.4.3");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvent', function() {
        it('should call getEvent successfully', function(done) {
          // TODO: uncomment, update parameter values for getEvent call and complete the assertions
          /*
          var type = "type_example";

          instance.getEvent(type, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.StreamSDKVersion);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamBySDKLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
            {
              let dataCtr = data.sdkVersions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamSDKVersionData);
                expect(data.sdk).to.be.a('string');
                expect(data.sdk).to.be("ruby");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("5.4.3");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getEvents', function() {
        it('should call getEvents successfully', function(done) {
          // TODO: uncomment getEvents call and complete the assertions
          /*

          instance.getEvents(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Events);
            expect(data.links).to.be.a(LaunchDarklyApi.UsageLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              {
                let dataCtr = data.links.subseries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Link);
                  expect(data.href).to.be.a('string');
                  expect(data.href).to.be("/api/v2/endpoint");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("application/json");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMAU', function() {
        it('should call getMAU successfully', function(done) {
          // TODO: uncomment getMAU call and complete the assertions
          /*

          instance.getMAU(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.MAU);
            expect(data.links).to.be.a(LaunchDarklyApi.UsageLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              {
                let dataCtr = data.links.subseries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Link);
                  expect(data.href).to.be.a('string');
                  expect(data.href).to.be("/api/v2/endpoint");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("application/json");
  
                        }
              }
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamBySDKLinksMetadata);
                expect(data.sdk).to.be.a('string');
                expect(data.sdk).to.be("ruby");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("5.4.3");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("server");

                      }
            }
            {
              let dataCtr = data.series;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamUsageSeries);
                expect(data._0).to.be.a('number');
                expect(data._0).to.be(0);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(1551740400000);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getMAUByCategory', function() {
        it('should call getMAUByCategory successfully', function(done) {
          // TODO: uncomment getMAUByCategory call and complete the assertions
          /*

          instance.getMAUByCategory(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.MAUbyCategory);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamBySDKLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.MAUMetadata);

                      }
            }
            {
              let dataCtr = data.series;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamUsageSeries);
                expect(data._0).to.be.a('number');
                expect(data._0).to.be(0);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(1551740400000);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStream', function() {
        it('should call getStream successfully', function(done) {
          // TODO: uncomment, update parameter values for getStream call and complete the assertions
          /*
          var source = "source_example";

          instance.getStream(source, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Stream);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamUsageLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              {
                let dataCtr = data.links.subseries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Link);
                  expect(data.href).to.be.a('string');
                  expect(data.href).to.be("/api/v2/endpoint");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("application/json");
  
                        }
              }
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamUsageMetadata);
                expect(data.sdk).to.be.a('string');
                expect(data.sdk).to.be("ruby");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("5.4.3");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("server");

                      }
            }
            {
              let dataCtr = data.series;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamUsageSeries);
                expect(data._0).to.be.a('number');
                expect(data._0).to.be(0);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(1551740400000);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStreamBySDK', function() {
        it('should call getStreamBySDK successfully', function(done) {
          // TODO: uncomment, update parameter values for getStreamBySDK call and complete the assertions
          /*
          var source = "source_example";

          instance.getStreamBySDK(source, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.StreamBySDK);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamBySDKLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
            {
              let dataCtr = data.metadata;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamBySDKLinksMetadata);
                expect(data.sdk).to.be.a('string');
                expect(data.sdk).to.be("ruby");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("5.4.3");
                expect(data.source).to.be.a('string');
                expect(data.source).to.be("server");

                      }
            }
            {
              let dataCtr = data.series;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamUsageSeries);
                expect(data._0).to.be.a('number');
                expect(data._0).to.be(0);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(1551740400000);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStreamSDKVersion', function() {
        it('should call getStreamSDKVersion successfully', function(done) {
          // TODO: uncomment, update parameter values for getStreamSDKVersion call and complete the assertions
          /*
          var source = "source_example";

          instance.getStreamSDKVersion(source, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.StreamSDKVersion);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamBySDKLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
            {
              let dataCtr = data.sdkVersions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamSDKVersionData);
                expect(data.sdk).to.be.a('string');
                expect(data.sdk).to.be("ruby");
                expect(data.version).to.be.a('string');
                expect(data.version).to.be("5.4.3");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getStreams', function() {
        it('should call getStreams successfully', function(done) {
          // TODO: uncomment getStreams call and complete the assertions
          /*

          instance.getStreams(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Streams);
            expect(data.links).to.be.a(LaunchDarklyApi.StreamUsageLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              {
                let dataCtr = data.links.subseries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Link);
                  expect(data.href).to.be.a('string');
                  expect(data.href).to.be("/api/v2/endpoint");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("application/json");
  
                        }
              }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUsage', function() {
        it('should call getUsage successfully', function(done) {
          // TODO: uncomment getUsage call and complete the assertions
          /*

          instance.getUsage(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Usage);
            expect(data.links).to.be.a(LaunchDarklyApi.UsageLinks);
                  expect(data.links.parent).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.parent.href).to.be.a('string');
                expect(data.links.parent.href).to.be("/api/v2/endpoint");
                expect(data.links.parent.type).to.be.a('string');
                expect(data.links.parent.type).to.be("application/json");
              expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              {
                let dataCtr = data.links.subseries;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Link);
                  expect(data.href).to.be.a('string');
                  expect(data.href).to.be("/api/v2/endpoint");
                  expect(data.type).to.be.a('string');
                  expect(data.type).to.be("application/json");
  
                        }
              }
            {
              let dataCtr = data.series;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.StreamUsageSeries);
                expect(data._0).to.be.a('number');
                expect(data._0).to.be(0);
                expect(data.time).to.be.a('number');
                expect(data.time).to.be(1551740400000);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
