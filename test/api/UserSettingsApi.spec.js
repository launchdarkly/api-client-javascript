/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.2
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.UserSettingsApi();
  });

  describe('(package)', function() {
    describe('UserSettingsApi', function() {
      describe('getExpiringUserTargetsForUser', function() {
        it('should call getExpiringUserTargetsForUser successfully', function(done) {
          // TODO: uncomment, update parameter values for getExpiringUserTargetsForUser call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var userKey = "userKey_example";

          instance.getExpiringUserTargetsForUser(projectKey, environmentKey, userKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationOnFlagsForUser);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationForFlag);
                expect(data.expirationDate).to.be.a('number');
                expect(data.expirationDate).to.be(1735689600000);
                expect(data.variationId).to.be.a('string');
                expect(data.variationId).to.be("");
                expect(data.userKey).to.be.a('string');
                expect(data.userKey).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.resourceId).to.be.a(LaunchDarklyApi.UserTargetingExpirationResourceIdForFlag);
                      expect(data.resourceId.kind).to.be.a('string');
                  expect(data.resourceId.kind).to.be("");
                  expect(data.resourceId.projectKey).to.be.a('string');
                  expect(data.resourceId.projectKey).to.be("");
                  expect(data.resourceId.environmentKey).to.be.a('string');
                  expect(data.resourceId.environmentKey).to.be("");
                  expect(data.resourceId.flagKey).to.be.a('string');
                  expect(data.resourceId.flagKey).to.be("");
                  expect(data.resourceId.key).to.be.a('string');
                  expect(data.resourceId.key).to.be("");
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserFlagSetting', function() {
        it('should call getUserFlagSetting successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserFlagSetting call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var userKey = "userKey_example";
          var featureFlagKey = "featureFlagKey_example";

          instance.getUserFlagSetting(projectKey, environmentKey, userKey, featureFlagKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.UserFlagSetting);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.value).to.be.a('boolean');
            expect(data.value).to.be(true);
            expect(data.setting).to.be.a('boolean');
            expect(data.setting).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getUserFlagSettings', function() {
        it('should call getUserFlagSettings successfully', function(done) {
          // TODO: uncomment, update parameter values for getUserFlagSettings call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var userKey = "userKey_example";

          instance.getUserFlagSettings(projectKey, environmentKey, userKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.UserFlagSettings);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.UserFlagSetting);
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.value).to.be.a('boolean');
                expect(data.value).to.be(true);
                expect(data.setting).to.be.a('boolean');
                expect(data.setting).to.be(false);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchExpiringUserTargetsForFlags', function() {
        it('should call patchExpiringUserTargetsForFlags successfully', function(done) {
          // TODO: uncomment, update parameter values for patchExpiringUserTargetsForFlags call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var userKey = "userKey_example";
          var semanticPatchWithComment = null;

          instance.patchExpiringUserTargetsForFlags(projectKey, environmentKey, userKey, semanticPatchWithComment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationOnFlagsForUser);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationForFlag);
                expect(data.expirationDate).to.be.a('number');
                expect(data.expirationDate).to.be(1735689600000);
                expect(data.variationId).to.be.a('string');
                expect(data.variationId).to.be("");
                expect(data.userKey).to.be.a('string');
                expect(data.userKey).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.resourceId).to.be.a(LaunchDarklyApi.UserTargetingExpirationResourceIdForFlag);
                      expect(data.resourceId.kind).to.be.a('string');
                  expect(data.resourceId.kind).to.be("");
                  expect(data.resourceId.projectKey).to.be.a('string');
                  expect(data.resourceId.projectKey).to.be("");
                  expect(data.resourceId.environmentKey).to.be.a('string');
                  expect(data.resourceId.environmentKey).to.be("");
                  expect(data.resourceId.flagKey).to.be.a('string');
                  expect(data.resourceId.flagKey).to.be("");
                  expect(data.resourceId.key).to.be.a('string');
                  expect(data.resourceId.key).to.be("");
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('putFlagSetting', function() {
        it('should call putFlagSetting successfully', function(done) {
          // TODO: uncomment, update parameter values for putFlagSetting call
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var userKey = "userKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var userSettingsBody = new LaunchDarklyApi.UserSettingsBody();
          userSettingsBody.setting = false;

          instance.putFlagSetting(projectKey, environmentKey, userKey, featureFlagKey, userSettingsBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
