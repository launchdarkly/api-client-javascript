/**
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.1
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.8
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.FeatureFlagsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('FeatureFlagsApi', function() {
    describe('copyFeatureFlag', function() {
      it('should call copyFeatureFlag successfully', function(done) {
        //uncomment below and update the code to test copyFeatureFlag
        //instance.copyFeatureFlag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteApprovalRequest', function() {
      it('should call deleteApprovalRequest successfully', function(done) {
        //uncomment below and update the code to test deleteApprovalRequest
        //instance.deleteApprovalRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFeatureFlag', function() {
      it('should call deleteFeatureFlag successfully', function(done) {
        //uncomment below and update the code to test deleteFeatureFlag
        //instance.deleteFeatureFlag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('deleteFlagConfigScheduledChanges', function() {
      it('should call deleteFlagConfigScheduledChanges successfully', function(done) {
        //uncomment below and update the code to test deleteFlagConfigScheduledChanges
        //instance.deleteFlagConfigScheduledChanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApprovalRequest', function() {
      it('should call getApprovalRequest successfully', function(done) {
        //uncomment below and update the code to test getApprovalRequest
        //instance.getApprovalRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getApprovalRequests', function() {
      it('should call getApprovalRequests successfully', function(done) {
        //uncomment below and update the code to test getApprovalRequests
        //instance.getApprovalRequests(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getExpiringUserTargets', function() {
      it('should call getExpiringUserTargets successfully', function(done) {
        //uncomment below and update the code to test getExpiringUserTargets
        //instance.getExpiringUserTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeatureFlag', function() {
      it('should call getFeatureFlag successfully', function(done) {
        //uncomment below and update the code to test getFeatureFlag
        //instance.getFeatureFlag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeatureFlagStatus', function() {
      it('should call getFeatureFlagStatus successfully', function(done) {
        //uncomment below and update the code to test getFeatureFlagStatus
        //instance.getFeatureFlagStatus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeatureFlagStatusAcrossEnvironments', function() {
      it('should call getFeatureFlagStatusAcrossEnvironments successfully', function(done) {
        //uncomment below and update the code to test getFeatureFlagStatusAcrossEnvironments
        //instance.getFeatureFlagStatusAcrossEnvironments(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeatureFlagStatuses', function() {
      it('should call getFeatureFlagStatuses successfully', function(done) {
        //uncomment below and update the code to test getFeatureFlagStatuses
        //instance.getFeatureFlagStatuses(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFeatureFlags', function() {
      it('should call getFeatureFlags successfully', function(done) {
        //uncomment below and update the code to test getFeatureFlags
        //instance.getFeatureFlags(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlagConfigScheduledChange', function() {
      it('should call getFlagConfigScheduledChange successfully', function(done) {
        //uncomment below and update the code to test getFlagConfigScheduledChange
        //instance.getFlagConfigScheduledChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlagConfigScheduledChanges', function() {
      it('should call getFlagConfigScheduledChanges successfully', function(done) {
        //uncomment below and update the code to test getFlagConfigScheduledChanges
        //instance.getFlagConfigScheduledChanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('getFlagConfigScheduledChangesConflicts', function() {
      it('should call getFlagConfigScheduledChangesConflicts successfully', function(done) {
        //uncomment below and update the code to test getFlagConfigScheduledChangesConflicts
        //instance.getFlagConfigScheduledChangesConflicts(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchExpiringUserTargets', function() {
      it('should call patchExpiringUserTargets successfully', function(done) {
        //uncomment below and update the code to test patchExpiringUserTargets
        //instance.patchExpiringUserTargets(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchFeatureFlag', function() {
      it('should call patchFeatureFlag successfully', function(done) {
        //uncomment below and update the code to test patchFeatureFlag
        //instance.patchFeatureFlag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('patchFlagConfigScheduledChange', function() {
      it('should call patchFlagConfigScheduledChange successfully', function(done) {
        //uncomment below and update the code to test patchFlagConfigScheduledChange
        //instance.patchFlagConfigScheduledChange(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postApplyApprovalRequest', function() {
      it('should call postApplyApprovalRequest successfully', function(done) {
        //uncomment below and update the code to test postApplyApprovalRequest
        //instance.postApplyApprovalRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postApprovalRequest', function() {
      it('should call postApprovalRequest successfully', function(done) {
        //uncomment below and update the code to test postApprovalRequest
        //instance.postApprovalRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postFeatureFlag', function() {
      it('should call postFeatureFlag successfully', function(done) {
        //uncomment below and update the code to test postFeatureFlag
        //instance.postFeatureFlag(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postFlagConfigScheduledChanges', function() {
      it('should call postFlagConfigScheduledChanges successfully', function(done) {
        //uncomment below and update the code to test postFlagConfigScheduledChanges
        //instance.postFlagConfigScheduledChanges(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('postReviewApprovalRequest', function() {
      it('should call postReviewApprovalRequest successfully', function(done) {
        //uncomment below and update the code to test postReviewApprovalRequest
        //instance.postReviewApprovalRequest(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
