/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.2
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.FeatureFlagsApi();
  });

  describe('(package)', function() {
    describe('FeatureFlagsApi', function() {
      describe('copyFeatureFlag', function() {
        it('should call copyFeatureFlag successfully', function(done) {
          // TODO: uncomment, update parameter values for copyFeatureFlag call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var featureFlagCopyBody = new LaunchDarklyApi.FeatureFlagCopyBody();
          featureFlagCopyBody.source = new LaunchDarklyApi.FeatureFlagCopyObject();
          featureFlagCopyBody.source.key = "staging";
          featureFlagCopyBody.source.currentVersion = 65;
          featureFlagCopyBody.target = new LaunchDarklyApi.FeatureFlagCopyObject();
          featureFlagCopyBody.target.key = "staging";
          featureFlagCopyBody.target.currentVersion = 65;
          featureFlagCopyBody.comment = "This is a comment string";
          featureFlagCopyBody.includedActions = [new LaunchDarklyApi.CopyActions()];
          featureFlagCopyBody.excludedActions = [new LaunchDarklyApi.CopyActions()];

          instance.copyFeatureFlag(projectKey, featureFlagKey, featureFlagCopyBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlag);
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("test-feature");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Test Feature");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("This flag controls whether test feature is turned on or not.");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("boolean");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.includeInSnippet).to.be.a('boolean');
            expect(data.includeInSnippet).to.be(false);
            expect(data.temporary).to.be.a('boolean');
            expect(data.temporary).to.be(false);
            expect(data.maintainerId).to.be.a('string');
            expect(data.maintainerId).to.be("561c579cd8fd5c2704000001");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.variations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Variation);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("24b32dd3-0ba6-46ee-86af-230eebf3c7cb");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("True");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("The true variation");
                expect(data.value).to.be.a(Object);
                expect(data.value).to.be();

                      }
            }
            {
              let dataCtr = data.goalIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(23);
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.CustomProperty);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My property");
                {
                  let dataCtr = data.value;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.maintainer).to.be.a(LaunchDarklyApi.Member);
                  expect(data.maintainer.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.maintainer.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.self.href).to.be.a('string');
                  expect(data.maintainer.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.self.type).to.be.a('string');
                  expect(data.maintainer.links.self.type).to.be("application/json");
                expect(data.maintainer.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.next.href).to.be.a('string');
                  expect(data.maintainer.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.next.type).to.be.a('string');
                  expect(data.maintainer.links.next.type).to.be("application/json");
              expect(data.maintainer.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.maintainer.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.maintainer.email).to.be.a('string');
              expect(data.maintainer.email).to.be("user@launchdarkly.com");
              expect(data.maintainer.firstName).to.be.a('string');
              expect(data.maintainer.firstName).to.be("Alan");
              expect(data.maintainer.lastName).to.be.a('string');
              expect(data.maintainer.lastName).to.be("Turing");
              expect(data.maintainer.verified).to.be.a('boolean');
              expect(data.maintainer.verified).to.be(false);
              expect(data.maintainer.pendingInvite).to.be.a('boolean');
              expect(data.maintainer.pendingInvite).to.be(false);
              expect(data.maintainer.isBeta).to.be.a('boolean');
              expect(data.maintainer.isBeta).to.be(false);
              {
                let dataCtr = data.maintainer.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.maintainer.lastSeen).to.be.a('number');
              expect(data.maintainer.lastSeen).to.be(1469326565348);
              expect(data.maintainer.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.maintainer.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.maintainer.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            {
              let dataCtr = data.environments;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagConfig);
                expect(data.on).to.be.a('boolean');
                expect(data.on).to.be(false);
                expect(data.archived).to.be.a('boolean');
                expect(data.archived).to.be(false);
                expect(data.salt).to.be.a('string');
                expect(data.salt).to.be("YWx0ZXJuYXRlLnBhZ2U=");
                expect(data.sel).to.be.a('string');
                expect(data.sel).to.be("45501b9314dc4641841af774cb038b96");
                expect(data.lastModified).to.be.a('number');
                expect(data.lastModified).to.be(1469326565348);
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(65);
                {
                  let dataCtr = data.targets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Target);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("1461797806427-7-115540266", "00142875-a39d-4028-a3b7-987ccd151649");
                      }
                    }
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.rules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Rule);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
                    expect(data.trackEvents).to.be.a('boolean');
                    expect(data.trackEvents).to.be(false);
                    expect(data.rollout).to.be.a(LaunchDarklyApi.Rollout);
                          expect(data.rollout.bucketBy).to.be.a('string');
                      expect(data.rollout.bucketBy).to.be("");
                      {
                        let dataCtr = data.rollout.variations;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                          expect(data.variation).to.be.a('number');
                          expect(data.variation).to.be(0);
                          expect(data.weight).to.be.a('number');
                          expect(data.weight).to.be(0);
          
                                }
                      }
                    {
                      let dataCtr = data.clauses;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Clause);
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("");
                        expect(data.attribute).to.be.a('string');
                        expect(data.attribute).to.be("groups");
                        expect(data.op).to.be.a('string');
                        expect(data.op).to.be("in");
                        {
                          let dataCtr = data.values;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be("Top Customers");
                          }
                        }
                        expect(data.negate).to.be.a('boolean');
                        expect(data.negate).to.be(false);
        
                              }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.fallthrough).to.be.a(LaunchDarklyApi.Fallthrough);
                      expect(data.fallthrough.variation).to.be.a('number');
                  expect(data.fallthrough.variation).to.be(0);
                  expect(data.fallthrough.rollout).to.be.a(LaunchDarklyApi.Rollout);
                        expect(data.fallthrough.rollout.bucketBy).to.be.a('string');
                    expect(data.fallthrough.rollout.bucketBy).to.be("");
                    {
                      let dataCtr = data.fallthrough.rollout.variations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
                        expect(data.weight).to.be.a('number');
                        expect(data.weight).to.be(0);
        
                              }
                    }
                expect(data.offVariation).to.be.a('number');
                expect(data.offVariation).to.be(0);
                {
                  let dataCtr = data.prerequisites;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Prerequisite);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                expect(data.trackEvents).to.be.a('boolean');
                expect(data.trackEvents).to.be(false);
                expect(data.trackEventsFallthrough).to.be.a('boolean');
                expect(data.trackEventsFallthrough).to.be(true);
                expect(data.site).to.be.a(LaunchDarklyApi.Site);
                      expect(data.site.href).to.be.a('string');
                  expect(data.site.href).to.be("/features/sort.order");
                  expect(data.site.type).to.be.a('string');
                  expect(data.site.type).to.be("text/html");
                expect(data.environmentName).to.be.a('string');
                expect(data.environmentName).to.be("");

                      }
            }
            expect(data.archivedDate).to.be.a('number');
            expect(data.archivedDate).to.be(1443652232590);
            expect(data.archived).to.be.a('boolean');
            expect(data.archived).to.be(false);
            expect(data.clientSideAvailability).to.be.a(LaunchDarklyApi.ClientSideAvailability);
                  expect(data.clientSideAvailability.usingEnvironmentId).to.be.a('boolean');
              expect(data.clientSideAvailability.usingEnvironmentId).to.be(false);
              expect(data.clientSideAvailability.usingMobileKey).to.be.a('boolean');
              expect(data.clientSideAvailability.usingMobileKey).to.be(false);
            expect(data.defaults).to.be.a(LaunchDarklyApi.Defaults);
                  expect(data.defaults.onVariation).to.be.a('number');
              expect(data.defaults.onVariation).to.be(0);
              expect(data.defaults.offVariation).to.be.a('number');
              expect(data.defaults.offVariation).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteApprovalRequest', function() {
        it('should call deleteApprovalRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteApprovalRequest call
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var approvalRequestId = "approvalRequestId_example";
          var opts = {};
          opts.approvalRequestConfigBody = new LaunchDarklyApi.ApprovalRequestConfigBody();
          opts.approvalRequestConfigBody.description = "";
          opts.approvalRequestConfigBody.instructions = new LaunchDarklyApi.SemanticPatchInstruction();
          opts.approvalRequestConfigBody.notifyMemberIds = ["memberId","memberId2"];
          opts.approvalRequestConfigBody.comment = "";

          instance.deleteApprovalRequest(projectKey, environmentKey, featureFlagKey, approvalRequestId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFeatureFlag', function() {
        it('should call deleteFeatureFlag successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFeatureFlag call
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";

          instance.deleteFeatureFlag(projectKey, featureFlagKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deleteFlagConfigScheduledChanges', function() {
        it('should call deleteFlagConfigScheduledChanges successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteFlagConfigScheduledChanges call
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var scheduledChangeId = "scheduledChangeId_example";

          instance.deleteFlagConfigScheduledChanges(projectKey, featureFlagKey, environmentKey, scheduledChangeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getApprovalRequest', function() {
        it('should call getApprovalRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for getApprovalRequest call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var approvalRequestId = "approvalRequestId_example";

          instance.getApprovalRequest(projectKey, featureFlagKey, environmentKey, approvalRequestId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.ApprovalRequests);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.ApprovalRequest);
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(0);
                expect(data.requestorId).to.be.a('string');
                expect(data.requestorId).to.be("");
                expect(data.reviewStatus).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("pending");
                expect(data.appliedByMemberID).to.be.a('string');
                expect(data.appliedByMemberID).to.be("");
                expect(data.appliedDate).to.be.a('number');
                expect(data.appliedDate).to.be(0);
                {
                  let dataCtr = data.allReviews;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.ApprovalRequestReview);
                    expect(data.creationDate).to.be.a('number');
                    expect(data.creationDate).to.be(0);
                    expect(data.kind).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                        expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                        expect(data.id).to.be.a(LaunchDarklyApi.Id);
            
    
                          }
                }
                {
                  let dataCtr = data.notifyMemberIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getApprovalRequests', function() {
        it('should call getApprovalRequests successfully', function(done) {
          // TODO: uncomment, update parameter values for getApprovalRequests call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";

          instance.getApprovalRequests(projectKey, featureFlagKey, environmentKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.ApprovalRequests);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.ApprovalRequest);
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(0);
                expect(data.requestorId).to.be.a('string');
                expect(data.requestorId).to.be("");
                expect(data.reviewStatus).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("pending");
                expect(data.appliedByMemberID).to.be.a('string');
                expect(data.appliedByMemberID).to.be("");
                expect(data.appliedDate).to.be.a('number');
                expect(data.appliedDate).to.be(0);
                {
                  let dataCtr = data.allReviews;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.ApprovalRequestReview);
                    expect(data.creationDate).to.be.a('number');
                    expect(data.creationDate).to.be(0);
                    expect(data.kind).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                        expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                        expect(data.id).to.be.a(LaunchDarklyApi.Id);
            
    
                          }
                }
                {
                  let dataCtr = data.notifyMemberIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getExpiringUserTargets', function() {
        it('should call getExpiringUserTargets successfully', function(done) {
          // TODO: uncomment, update parameter values for getExpiringUserTargets call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var featureFlagKey = "featureFlagKey_example";

          instance.getExpiringUserTargets(projectKey, environmentKey, featureFlagKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationForFlags);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationForFlag);
                expect(data.expirationDate).to.be.a('number');
                expect(data.expirationDate).to.be(1735689600000);
                expect(data.variationId).to.be.a('string');
                expect(data.variationId).to.be("");
                expect(data.userKey).to.be.a('string');
                expect(data.userKey).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.resourceId).to.be.a(LaunchDarklyApi.UserTargetingExpirationResourceIdForFlag);
                      expect(data.resourceId.kind).to.be.a('string');
                  expect(data.resourceId.kind).to.be("");
                  expect(data.resourceId.projectKey).to.be.a('string');
                  expect(data.resourceId.projectKey).to.be("");
                  expect(data.resourceId.environmentKey).to.be.a('string');
                  expect(data.resourceId.environmentKey).to.be("");
                  expect(data.resourceId.flagKey).to.be.a('string');
                  expect(data.resourceId.flagKey).to.be("");
                  expect(data.resourceId.key).to.be.a('string');
                  expect(data.resourceId.key).to.be("");
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureFlag', function() {
        it('should call getFeatureFlag successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureFlag call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var opts = {};
          opts.env = ["env_example"];

          instance.getFeatureFlag(projectKey, featureFlagKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlag);
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("test-feature");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Test Feature");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("This flag controls whether test feature is turned on or not.");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("boolean");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.includeInSnippet).to.be.a('boolean');
            expect(data.includeInSnippet).to.be(false);
            expect(data.temporary).to.be.a('boolean');
            expect(data.temporary).to.be(false);
            expect(data.maintainerId).to.be.a('string');
            expect(data.maintainerId).to.be("561c579cd8fd5c2704000001");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.variations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Variation);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("24b32dd3-0ba6-46ee-86af-230eebf3c7cb");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("True");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("The true variation");
                expect(data.value).to.be.a(Object);
                expect(data.value).to.be();

                      }
            }
            {
              let dataCtr = data.goalIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(23);
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.CustomProperty);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My property");
                {
                  let dataCtr = data.value;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.maintainer).to.be.a(LaunchDarklyApi.Member);
                  expect(data.maintainer.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.maintainer.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.self.href).to.be.a('string');
                  expect(data.maintainer.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.self.type).to.be.a('string');
                  expect(data.maintainer.links.self.type).to.be("application/json");
                expect(data.maintainer.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.next.href).to.be.a('string');
                  expect(data.maintainer.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.next.type).to.be.a('string');
                  expect(data.maintainer.links.next.type).to.be("application/json");
              expect(data.maintainer.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.maintainer.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.maintainer.email).to.be.a('string');
              expect(data.maintainer.email).to.be("user@launchdarkly.com");
              expect(data.maintainer.firstName).to.be.a('string');
              expect(data.maintainer.firstName).to.be("Alan");
              expect(data.maintainer.lastName).to.be.a('string');
              expect(data.maintainer.lastName).to.be("Turing");
              expect(data.maintainer.verified).to.be.a('boolean');
              expect(data.maintainer.verified).to.be(false);
              expect(data.maintainer.pendingInvite).to.be.a('boolean');
              expect(data.maintainer.pendingInvite).to.be(false);
              expect(data.maintainer.isBeta).to.be.a('boolean');
              expect(data.maintainer.isBeta).to.be(false);
              {
                let dataCtr = data.maintainer.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.maintainer.lastSeen).to.be.a('number');
              expect(data.maintainer.lastSeen).to.be(1469326565348);
              expect(data.maintainer.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.maintainer.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.maintainer.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            {
              let dataCtr = data.environments;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagConfig);
                expect(data.on).to.be.a('boolean');
                expect(data.on).to.be(false);
                expect(data.archived).to.be.a('boolean');
                expect(data.archived).to.be(false);
                expect(data.salt).to.be.a('string');
                expect(data.salt).to.be("YWx0ZXJuYXRlLnBhZ2U=");
                expect(data.sel).to.be.a('string');
                expect(data.sel).to.be("45501b9314dc4641841af774cb038b96");
                expect(data.lastModified).to.be.a('number');
                expect(data.lastModified).to.be(1469326565348);
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(65);
                {
                  let dataCtr = data.targets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Target);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("1461797806427-7-115540266", "00142875-a39d-4028-a3b7-987ccd151649");
                      }
                    }
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.rules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Rule);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
                    expect(data.trackEvents).to.be.a('boolean');
                    expect(data.trackEvents).to.be(false);
                    expect(data.rollout).to.be.a(LaunchDarklyApi.Rollout);
                          expect(data.rollout.bucketBy).to.be.a('string');
                      expect(data.rollout.bucketBy).to.be("");
                      {
                        let dataCtr = data.rollout.variations;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                          expect(data.variation).to.be.a('number');
                          expect(data.variation).to.be(0);
                          expect(data.weight).to.be.a('number');
                          expect(data.weight).to.be(0);
          
                                }
                      }
                    {
                      let dataCtr = data.clauses;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Clause);
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("");
                        expect(data.attribute).to.be.a('string');
                        expect(data.attribute).to.be("groups");
                        expect(data.op).to.be.a('string');
                        expect(data.op).to.be("in");
                        {
                          let dataCtr = data.values;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be("Top Customers");
                          }
                        }
                        expect(data.negate).to.be.a('boolean');
                        expect(data.negate).to.be(false);
        
                              }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.fallthrough).to.be.a(LaunchDarklyApi.Fallthrough);
                      expect(data.fallthrough.variation).to.be.a('number');
                  expect(data.fallthrough.variation).to.be(0);
                  expect(data.fallthrough.rollout).to.be.a(LaunchDarklyApi.Rollout);
                        expect(data.fallthrough.rollout.bucketBy).to.be.a('string');
                    expect(data.fallthrough.rollout.bucketBy).to.be("");
                    {
                      let dataCtr = data.fallthrough.rollout.variations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
                        expect(data.weight).to.be.a('number');
                        expect(data.weight).to.be(0);
        
                              }
                    }
                expect(data.offVariation).to.be.a('number');
                expect(data.offVariation).to.be(0);
                {
                  let dataCtr = data.prerequisites;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Prerequisite);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                expect(data.trackEvents).to.be.a('boolean');
                expect(data.trackEvents).to.be(false);
                expect(data.trackEventsFallthrough).to.be.a('boolean');
                expect(data.trackEventsFallthrough).to.be(true);
                expect(data.site).to.be.a(LaunchDarklyApi.Site);
                      expect(data.site.href).to.be.a('string');
                  expect(data.site.href).to.be("/features/sort.order");
                  expect(data.site.type).to.be.a('string');
                  expect(data.site.type).to.be("text/html");
                expect(data.environmentName).to.be.a('string');
                expect(data.environmentName).to.be("");

                      }
            }
            expect(data.archivedDate).to.be.a('number');
            expect(data.archivedDate).to.be(1443652232590);
            expect(data.archived).to.be.a('boolean');
            expect(data.archived).to.be(false);
            expect(data.clientSideAvailability).to.be.a(LaunchDarklyApi.ClientSideAvailability);
                  expect(data.clientSideAvailability.usingEnvironmentId).to.be.a('boolean');
              expect(data.clientSideAvailability.usingEnvironmentId).to.be(false);
              expect(data.clientSideAvailability.usingMobileKey).to.be.a('boolean');
              expect(data.clientSideAvailability.usingMobileKey).to.be(false);
            expect(data.defaults).to.be.a(LaunchDarklyApi.Defaults);
                  expect(data.defaults.onVariation).to.be.a('number');
              expect(data.defaults.onVariation).to.be(0);
              expect(data.defaults.offVariation).to.be.a('number');
              expect(data.defaults.offVariation).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureFlagStatus', function() {
        it('should call getFeatureFlagStatus successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureFlagStatus call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var featureFlagKey = "featureFlagKey_example";

          instance.getFeatureFlagStatus(projectKey, environmentKey, featureFlagKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagStatus);
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("new");
            expect(data.lastRequested).to.be.a('string');
            expect(data.lastRequested).to.be("2016-08-16T21:10:11.886Z");
            expect(data._default).to.be.a(Object);
            expect(data._default).to.be();
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureFlagStatusAcrossEnvironments', function() {
        it('should call getFeatureFlagStatusAcrossEnvironments successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureFlagStatusAcrossEnvironments call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";

          instance.getFeatureFlagStatusAcrossEnvironments(projectKey, featureFlagKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagStatusAcrossEnvironments);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("");
            {
              let dataCtr = data.environments;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagStatusForQueriedEnvironment);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("new");
                expect(data.lastRequested).to.be.a('string');
                expect(data.lastRequested).to.be("2016-08-16T21:10:11.886Z");
                expect(data._default).to.be.a(Object);
                expect(data._default).to.be();

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureFlagStatuses', function() {
        it('should call getFeatureFlagStatuses successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureFlagStatuses call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";

          instance.getFeatureFlagStatuses(projectKey, environmentKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagStatuses);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagStatus);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("new");
                expect(data.lastRequested).to.be.a('string');
                expect(data.lastRequested).to.be("2016-08-16T21:10:11.886Z");
                expect(data._default).to.be.a(Object);
                expect(data._default).to.be();
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFeatureFlags', function() {
        it('should call getFeatureFlags successfully', function(done) {
          // TODO: uncomment, update parameter values for getFeatureFlags call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var opts = {};
          opts.env = ["env_example"];
          opts.summary = true;
          opts.archived = true;
          opts.limit = 8.14;
          opts.offset = 8.14;
          opts.filter = "filter_example";
          opts.sort = "sort_example";
          opts.tag = "tag_example";

          instance.getFeatureFlags(projectKey, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlags);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlag);
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("test-feature");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("Test Feature");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("This flag controls whether test feature is turned on or not.");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("boolean");
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(1443652232590);
                expect(data.includeInSnippet).to.be.a('boolean');
                expect(data.includeInSnippet).to.be(false);
                expect(data.temporary).to.be.a('boolean');
                expect(data.temporary).to.be(false);
                expect(data.maintainerId).to.be.a('string');
                expect(data.maintainerId).to.be("561c579cd8fd5c2704000001");
                {
                  let dataCtr = data.tags;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.variations;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Variation);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("24b32dd3-0ba6-46ee-86af-230eebf3c7cb");
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("True");
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("The true variation");
                    expect(data.value).to.be.a(Object);
                    expect(data.value).to.be();
    
                          }
                }
                {
                  let dataCtr = data.goalIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(23);
                {
                  let dataCtr = data.customProperties;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.CustomProperty);
                    expect(data.name).to.be.a('string');
                    expect(data.name).to.be("My property");
                    {
                      let dataCtr = data.value;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("");
                      }
                    }
    
                          }
                }
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.maintainer).to.be.a(LaunchDarklyApi.Member);
                      expect(data.maintainer.links).to.be.a(LaunchDarklyApi.Links);
                        expect(data.maintainer.links.self).to.be.a(LaunchDarklyApi.Link);
                          expect(data.maintainer.links.self.href).to.be.a('string');
                      expect(data.maintainer.links.self.href).to.be("/api/v2/endpoint");
                      expect(data.maintainer.links.self.type).to.be.a('string');
                      expect(data.maintainer.links.self.type).to.be("application/json");
                    expect(data.maintainer.links.next).to.be.a(LaunchDarklyApi.Link);
                          expect(data.maintainer.links.next.href).to.be.a('string');
                      expect(data.maintainer.links.next.href).to.be("/api/v2/endpoint");
                      expect(data.maintainer.links.next.type).to.be.a('string');
                      expect(data.maintainer.links.next.type).to.be("application/json");
                  expect(data.maintainer.id).to.be.a(LaunchDarklyApi.Id);
                      expect(data.maintainer.role).to.be.a(LaunchDarklyApi.Role);
                      expect(data.maintainer.email).to.be.a('string');
                  expect(data.maintainer.email).to.be("user@launchdarkly.com");
                  expect(data.maintainer.firstName).to.be.a('string');
                  expect(data.maintainer.firstName).to.be("Alan");
                  expect(data.maintainer.lastName).to.be.a('string');
                  expect(data.maintainer.lastName).to.be("Turing");
                  expect(data.maintainer.verified).to.be.a('boolean');
                  expect(data.maintainer.verified).to.be(false);
                  expect(data.maintainer.pendingInvite).to.be.a('boolean');
                  expect(data.maintainer.pendingInvite).to.be(false);
                  expect(data.maintainer.isBeta).to.be.a('boolean');
                  expect(data.maintainer.isBeta).to.be(false);
                  {
                    let dataCtr = data.maintainer.customRoles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(LaunchDarklyApi.Id);
      
                            }
                  }
                  expect(data.maintainer.lastSeen).to.be.a('number');
                  expect(data.maintainer.lastSeen).to.be(1469326565348);
                  expect(data.maintainer.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                        expect(data.maintainer.lastSeenMetadata.tokenId).to.be.a('string');
                    expect(data.maintainer.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
                {
                  let dataCtr = data.environments;
                  expect(dataCtr).to.be.an(Object);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.FeatureFlagConfig);
                    expect(data.on).to.be.a('boolean');
                    expect(data.on).to.be(false);
                    expect(data.archived).to.be.a('boolean');
                    expect(data.archived).to.be(false);
                    expect(data.salt).to.be.a('string');
                    expect(data.salt).to.be("YWx0ZXJuYXRlLnBhZ2U=");
                    expect(data.sel).to.be.a('string');
                    expect(data.sel).to.be("45501b9314dc4641841af774cb038b96");
                    expect(data.lastModified).to.be.a('number');
                    expect(data.lastModified).to.be(1469326565348);
                    expect(data.version).to.be.a('number');
                    expect(data.version).to.be(65);
                    {
                      let dataCtr = data.targets;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Target);
                        {
                          let dataCtr = data.values;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a('string');
                            expect(data).to.be("1461797806427-7-115540266", "00142875-a39d-4028-a3b7-987ccd151649");
                          }
                        }
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
        
                              }
                    }
                    {
                      let dataCtr = data.rules;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Rule);
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("");
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
                        expect(data.trackEvents).to.be.a('boolean');
                        expect(data.trackEvents).to.be(false);
                        expect(data.rollout).to.be.a(LaunchDarklyApi.Rollout);
                              expect(data.rollout.bucketBy).to.be.a('string');
                          expect(data.rollout.bucketBy).to.be("");
                          {
                            let dataCtr = data.rollout.variations;
                            expect(dataCtr).to.be.an(Array);
                            expect(dataCtr).to.not.be.empty();
                            for (let p in dataCtr) {
                              let data = dataCtr[p];
                              expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                              expect(data.variation).to.be.a('number');
                              expect(data.variation).to.be(0);
                              expect(data.weight).to.be.a('number');
                              expect(data.weight).to.be(0);
              
                                    }
                          }
                        {
                          let dataCtr = data.clauses;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(LaunchDarklyApi.Clause);
                            expect(data.id).to.be.a('string');
                            expect(data.id).to.be("");
                            expect(data.attribute).to.be.a('string');
                            expect(data.attribute).to.be("groups");
                            expect(data.op).to.be.a('string');
                            expect(data.op).to.be("in");
                            {
                              let dataCtr = data.values;
                              expect(dataCtr).to.be.an(Array);
                              expect(dataCtr).to.not.be.empty();
                              for (let p in dataCtr) {
                                let data = dataCtr[p];
                                expect(data).to.be.a(Object);
                                expect(data).to.be("Top Customers");
                              }
                            }
                            expect(data.negate).to.be.a('boolean');
                            expect(data.negate).to.be(false);
            
                                  }
                        }
                        expect(data.description).to.be.a('string');
                        expect(data.description).to.be("");
        
                              }
                    }
                    expect(data.fallthrough).to.be.a(LaunchDarklyApi.Fallthrough);
                          expect(data.fallthrough.variation).to.be.a('number');
                      expect(data.fallthrough.variation).to.be(0);
                      expect(data.fallthrough.rollout).to.be.a(LaunchDarklyApi.Rollout);
                            expect(data.fallthrough.rollout.bucketBy).to.be.a('string');
                        expect(data.fallthrough.rollout.bucketBy).to.be("");
                        {
                          let dataCtr = data.fallthrough.rollout.variations;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                            expect(data.variation).to.be.a('number');
                            expect(data.variation).to.be(0);
                            expect(data.weight).to.be.a('number');
                            expect(data.weight).to.be(0);
            
                                  }
                        }
                    expect(data.offVariation).to.be.a('number');
                    expect(data.offVariation).to.be(0);
                    {
                      let dataCtr = data.prerequisites;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Prerequisite);
                        expect(data.key).to.be.a('string');
                        expect(data.key).to.be("");
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
        
                              }
                    }
                    expect(data.trackEvents).to.be.a('boolean');
                    expect(data.trackEvents).to.be(false);
                    expect(data.trackEventsFallthrough).to.be.a('boolean');
                    expect(data.trackEventsFallthrough).to.be(true);
                    expect(data.site).to.be.a(LaunchDarklyApi.Site);
                          expect(data.site.href).to.be.a('string');
                      expect(data.site.href).to.be("/features/sort.order");
                      expect(data.site.type).to.be.a('string');
                      expect(data.site.type).to.be("text/html");
                    expect(data.environmentName).to.be.a('string');
                    expect(data.environmentName).to.be("");
    
                          }
                }
                expect(data.archivedDate).to.be.a('number');
                expect(data.archivedDate).to.be(1443652232590);
                expect(data.archived).to.be.a('boolean');
                expect(data.archived).to.be(false);
                expect(data.clientSideAvailability).to.be.a(LaunchDarklyApi.ClientSideAvailability);
                      expect(data.clientSideAvailability.usingEnvironmentId).to.be.a('boolean');
                  expect(data.clientSideAvailability.usingEnvironmentId).to.be(false);
                  expect(data.clientSideAvailability.usingMobileKey).to.be.a('boolean');
                  expect(data.clientSideAvailability.usingMobileKey).to.be(false);
                expect(data.defaults).to.be.a(LaunchDarklyApi.Defaults);
                      expect(data.defaults.onVariation).to.be.a('number');
                  expect(data.defaults.onVariation).to.be(0);
                  expect(data.defaults.offVariation).to.be.a('number');
                  expect(data.defaults.offVariation).to.be(0);

                      }
            }
            expect(data.totalCount).to.be.a('number');
            expect(data.totalCount).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFlagConfigScheduledChange', function() {
        it('should call getFlagConfigScheduledChange successfully', function(done) {
          // TODO: uncomment, update parameter values for getFlagConfigScheduledChange call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var scheduledChangeId = "scheduledChangeId_example";

          instance.getFlagConfigScheduledChange(projectKey, featureFlagKey, environmentKey, scheduledChangeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChange);
            expect(data.executionDate).to.be.a('number');
            expect(data.executionDate).to.be(0);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFlagConfigScheduledChanges', function() {
        it('should call getFlagConfigScheduledChanges successfully', function(done) {
          // TODO: uncomment, update parameter values for getFlagConfigScheduledChanges call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";

          instance.getFlagConfigScheduledChanges(projectKey, featureFlagKey, environmentKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChanges);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChange);
                expect(data.executionDate).to.be.a('number');
                expect(data.executionDate).to.be(0);
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getFlagConfigScheduledChangesConflicts', function() {
        it('should call getFlagConfigScheduledChangesConflicts successfully', function(done) {
          // TODO: uncomment, update parameter values for getFlagConfigScheduledChangesConflicts call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var flagConfigScheduledChangesConflictsBody = new LaunchDarklyApi.FlagConfigScheduledChangesConflictsBody();
          flagConfigScheduledChangesConflictsBody.executionDate = 0;
          flagConfigScheduledChangesConflictsBody.instructions = new LaunchDarklyApi.SemanticPatchInstruction();

          instance.getFlagConfigScheduledChangesConflicts(projectKey, featureFlagKey, environmentKey, flagConfigScheduledChangesConflictsBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChangesConflicts);
            {
              let dataCtr = data.instructions;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChangesConflictsInstructions);
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("removeUserTargets");
                {
                  let dataCtr = data.conflicts;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.ScheduledChangesFeatureFlagConflict);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.reason).to.be.a('string');
                    expect(data.reason).to.be("");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchExpiringUserTargets', function() {
        it('should call patchExpiringUserTargets successfully', function(done) {
          // TODO: uncomment, update parameter values for patchExpiringUserTargets call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var environmentKey = "environmentKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var semanticPatchWithComment = null;

          instance.patchExpiringUserTargets(projectKey, environmentKey, featureFlagKey, semanticPatchWithComment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationForFlags);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.UserTargetingExpirationForFlag);
                expect(data.expirationDate).to.be.a('number');
                expect(data.expirationDate).to.be(1735689600000);
                expect(data.variationId).to.be.a('string');
                expect(data.variationId).to.be("");
                expect(data.userKey).to.be.a('string');
                expect(data.userKey).to.be("");
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.resourceId).to.be.a(LaunchDarklyApi.UserTargetingExpirationResourceIdForFlag);
                      expect(data.resourceId.kind).to.be.a('string');
                  expect(data.resourceId.kind).to.be("");
                  expect(data.resourceId.projectKey).to.be.a('string');
                  expect(data.resourceId.projectKey).to.be("");
                  expect(data.resourceId.environmentKey).to.be.a('string');
                  expect(data.resourceId.environmentKey).to.be("");
                  expect(data.resourceId.flagKey).to.be.a('string');
                  expect(data.resourceId.flagKey).to.be("");
                  expect(data.resourceId.key).to.be.a('string');
                  expect(data.resourceId.key).to.be("");
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchFeatureFlag', function() {
        it('should call patchFeatureFlag successfully', function(done) {
          // TODO: uncomment, update parameter values for patchFeatureFlag call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var patchComment = new LaunchDarklyApi.PatchComment();
          patchComment.comment = "This is a comment string";
          patchComment.patch = [new LaunchDarklyApi.PatchOperation()];
          patchComment.patch[0].op = "replace";
          patchComment.patch[0].path = "/name";
          patchComment.patch[0].value = "My resource name";

          instance.patchFeatureFlag(projectKey, featureFlagKey, patchComment, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlag);
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("test-feature");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Test Feature");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("This flag controls whether test feature is turned on or not.");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("boolean");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.includeInSnippet).to.be.a('boolean');
            expect(data.includeInSnippet).to.be(false);
            expect(data.temporary).to.be.a('boolean');
            expect(data.temporary).to.be(false);
            expect(data.maintainerId).to.be.a('string');
            expect(data.maintainerId).to.be("561c579cd8fd5c2704000001");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.variations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Variation);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("24b32dd3-0ba6-46ee-86af-230eebf3c7cb");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("True");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("The true variation");
                expect(data.value).to.be.a(Object);
                expect(data.value).to.be();

                      }
            }
            {
              let dataCtr = data.goalIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(23);
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.CustomProperty);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My property");
                {
                  let dataCtr = data.value;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.maintainer).to.be.a(LaunchDarklyApi.Member);
                  expect(data.maintainer.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.maintainer.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.self.href).to.be.a('string');
                  expect(data.maintainer.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.self.type).to.be.a('string');
                  expect(data.maintainer.links.self.type).to.be("application/json");
                expect(data.maintainer.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.next.href).to.be.a('string');
                  expect(data.maintainer.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.next.type).to.be.a('string');
                  expect(data.maintainer.links.next.type).to.be("application/json");
              expect(data.maintainer.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.maintainer.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.maintainer.email).to.be.a('string');
              expect(data.maintainer.email).to.be("user@launchdarkly.com");
              expect(data.maintainer.firstName).to.be.a('string');
              expect(data.maintainer.firstName).to.be("Alan");
              expect(data.maintainer.lastName).to.be.a('string');
              expect(data.maintainer.lastName).to.be("Turing");
              expect(data.maintainer.verified).to.be.a('boolean');
              expect(data.maintainer.verified).to.be(false);
              expect(data.maintainer.pendingInvite).to.be.a('boolean');
              expect(data.maintainer.pendingInvite).to.be(false);
              expect(data.maintainer.isBeta).to.be.a('boolean');
              expect(data.maintainer.isBeta).to.be(false);
              {
                let dataCtr = data.maintainer.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.maintainer.lastSeen).to.be.a('number');
              expect(data.maintainer.lastSeen).to.be(1469326565348);
              expect(data.maintainer.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.maintainer.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.maintainer.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            {
              let dataCtr = data.environments;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagConfig);
                expect(data.on).to.be.a('boolean');
                expect(data.on).to.be(false);
                expect(data.archived).to.be.a('boolean');
                expect(data.archived).to.be(false);
                expect(data.salt).to.be.a('string');
                expect(data.salt).to.be("YWx0ZXJuYXRlLnBhZ2U=");
                expect(data.sel).to.be.a('string');
                expect(data.sel).to.be("45501b9314dc4641841af774cb038b96");
                expect(data.lastModified).to.be.a('number');
                expect(data.lastModified).to.be(1469326565348);
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(65);
                {
                  let dataCtr = data.targets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Target);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("1461797806427-7-115540266", "00142875-a39d-4028-a3b7-987ccd151649");
                      }
                    }
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.rules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Rule);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
                    expect(data.trackEvents).to.be.a('boolean');
                    expect(data.trackEvents).to.be(false);
                    expect(data.rollout).to.be.a(LaunchDarklyApi.Rollout);
                          expect(data.rollout.bucketBy).to.be.a('string');
                      expect(data.rollout.bucketBy).to.be("");
                      {
                        let dataCtr = data.rollout.variations;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                          expect(data.variation).to.be.a('number');
                          expect(data.variation).to.be(0);
                          expect(data.weight).to.be.a('number');
                          expect(data.weight).to.be(0);
          
                                }
                      }
                    {
                      let dataCtr = data.clauses;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Clause);
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("");
                        expect(data.attribute).to.be.a('string');
                        expect(data.attribute).to.be("groups");
                        expect(data.op).to.be.a('string');
                        expect(data.op).to.be("in");
                        {
                          let dataCtr = data.values;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be("Top Customers");
                          }
                        }
                        expect(data.negate).to.be.a('boolean');
                        expect(data.negate).to.be(false);
        
                              }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.fallthrough).to.be.a(LaunchDarklyApi.Fallthrough);
                      expect(data.fallthrough.variation).to.be.a('number');
                  expect(data.fallthrough.variation).to.be(0);
                  expect(data.fallthrough.rollout).to.be.a(LaunchDarklyApi.Rollout);
                        expect(data.fallthrough.rollout.bucketBy).to.be.a('string');
                    expect(data.fallthrough.rollout.bucketBy).to.be("");
                    {
                      let dataCtr = data.fallthrough.rollout.variations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
                        expect(data.weight).to.be.a('number');
                        expect(data.weight).to.be(0);
        
                              }
                    }
                expect(data.offVariation).to.be.a('number');
                expect(data.offVariation).to.be(0);
                {
                  let dataCtr = data.prerequisites;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Prerequisite);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                expect(data.trackEvents).to.be.a('boolean');
                expect(data.trackEvents).to.be(false);
                expect(data.trackEventsFallthrough).to.be.a('boolean');
                expect(data.trackEventsFallthrough).to.be(true);
                expect(data.site).to.be.a(LaunchDarklyApi.Site);
                      expect(data.site.href).to.be.a('string');
                  expect(data.site.href).to.be("/features/sort.order");
                  expect(data.site.type).to.be.a('string');
                  expect(data.site.type).to.be("text/html");
                expect(data.environmentName).to.be.a('string');
                expect(data.environmentName).to.be("");

                      }
            }
            expect(data.archivedDate).to.be.a('number');
            expect(data.archivedDate).to.be(1443652232590);
            expect(data.archived).to.be.a('boolean');
            expect(data.archived).to.be(false);
            expect(data.clientSideAvailability).to.be.a(LaunchDarklyApi.ClientSideAvailability);
                  expect(data.clientSideAvailability.usingEnvironmentId).to.be.a('boolean');
              expect(data.clientSideAvailability.usingEnvironmentId).to.be(false);
              expect(data.clientSideAvailability.usingMobileKey).to.be.a('boolean');
              expect(data.clientSideAvailability.usingMobileKey).to.be(false);
            expect(data.defaults).to.be.a(LaunchDarklyApi.Defaults);
                  expect(data.defaults.onVariation).to.be.a('number');
              expect(data.defaults.onVariation).to.be(0);
              expect(data.defaults.offVariation).to.be.a('number');
              expect(data.defaults.offVariation).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchFlagConfigScheduledChange', function() {
        it('should call patchFlagConfigScheduledChange successfully', function(done) {
          // TODO: uncomment, update parameter values for patchFlagConfigScheduledChange call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var flagConfigScheduledChangesPatchBody = new LaunchDarklyApi.FlagConfigScheduledChangesPatchBody();
          flagConfigScheduledChangesPatchBody.comment = "";
          flagConfigScheduledChangesPatchBody.instructions = new LaunchDarklyApi.SemanticPatchInstruction();
          var environmentKey = "environmentKey_example";
          var scheduledChangeId = "scheduledChangeId_example";

          instance.patchFlagConfigScheduledChange(projectKey, featureFlagKey, flagConfigScheduledChangesPatchBody, environmentKey, scheduledChangeId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChange);
            expect(data.executionDate).to.be.a('number');
            expect(data.executionDate).to.be(0);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postApplyApprovalRequest', function() {
        it('should call postApplyApprovalRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for postApplyApprovalRequest call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var approvalRequestId = "approvalRequestId_example";
          var approvalRequestApplyConfigBody = new LaunchDarklyApi.ApprovalRequestApplyConfigBody();
          approvalRequestApplyConfigBody.comment = "Applying approved changes";

          instance.postApplyApprovalRequest(projectKey, featureFlagKey, environmentKey, approvalRequestId, approvalRequestApplyConfigBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.ApprovalRequests);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.ApprovalRequest);
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(0);
                expect(data.requestorId).to.be.a('string');
                expect(data.requestorId).to.be("");
                expect(data.reviewStatus).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("pending");
                expect(data.appliedByMemberID).to.be.a('string');
                expect(data.appliedByMemberID).to.be("");
                expect(data.appliedDate).to.be.a('number');
                expect(data.appliedDate).to.be(0);
                {
                  let dataCtr = data.allReviews;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.ApprovalRequestReview);
                    expect(data.creationDate).to.be.a('number');
                    expect(data.creationDate).to.be(0);
                    expect(data.kind).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                        expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                        expect(data.id).to.be.a(LaunchDarklyApi.Id);
            
    
                          }
                }
                {
                  let dataCtr = data.notifyMemberIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postApprovalRequest', function() {
        it('should call postApprovalRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for postApprovalRequest call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var approvalRequestId = "approvalRequestId_example";
          var opts = {};
          opts.approvalRequestConfigBody = new LaunchDarklyApi.ApprovalRequestConfigBody();
          opts.approvalRequestConfigBody.description = "";
          opts.approvalRequestConfigBody.instructions = new LaunchDarklyApi.SemanticPatchInstruction();
          opts.approvalRequestConfigBody.notifyMemberIds = ["memberId","memberId2"];
          opts.approvalRequestConfigBody.comment = "";

          instance.postApprovalRequest(projectKey, featureFlagKey, environmentKey, approvalRequestId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.ApprovalRequest);
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(0);
            expect(data.requestorId).to.be.a('string');
            expect(data.requestorId).to.be("");
            expect(data.reviewStatus).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                expect(data.status).to.be.a('string');
            expect(data.status).to.be("pending");
            expect(data.appliedByMemberID).to.be.a('string');
            expect(data.appliedByMemberID).to.be("");
            expect(data.appliedDate).to.be.a('number');
            expect(data.appliedDate).to.be(0);
            {
              let dataCtr = data.allReviews;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.ApprovalRequestReview);
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(0);
                expect(data.kind).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                    expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                    expect(data.id).to.be.a(LaunchDarklyApi.Id);
        

                      }
            }
            {
              let dataCtr = data.notifyMemberIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postFeatureFlag', function() {
        it('should call postFeatureFlag successfully', function(done) {
          // TODO: uncomment, update parameter values for postFeatureFlag call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagBody = new LaunchDarklyApi.FeatureFlagBody();
          featureFlagBody.name = "new test flag";
          featureFlagBody.key = "new-test-flag";
          featureFlagBody.description = "This flag controls whether test feature is turned on or not.";
          featureFlagBody.variations = [new LaunchDarklyApi.Variation()];
          featureFlagBody.variations[0].id = "24b32dd3-0ba6-46ee-86af-230eebf3c7cb";
          featureFlagBody.variations[0].name = "True";
          featureFlagBody.variations[0].description = "The true variation";
          featureFlagBody.variations[0].value = ;
          featureFlagBody.temporary = false;
          featureFlagBody.tags = [""];
          featureFlagBody.includeInSnippet = false;
          featureFlagBody.clientSideAvailability = new LaunchDarklyApi.ClientSideAvailability();
          featureFlagBody.clientSideAvailability.usingEnvironmentId = false;
          featureFlagBody.clientSideAvailability.usingMobileKey = false;
          featureFlagBody.defaults = new LaunchDarklyApi.Defaults();
          featureFlagBody.defaults.onVariation = 0;
          featureFlagBody.defaults.offVariation = 0;
          var opts = {};
          opts.clone = "clone_example";

          instance.postFeatureFlag(projectKey, featureFlagBody, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlag);
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("test-feature");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("Test Feature");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("This flag controls whether test feature is turned on or not.");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("boolean");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.includeInSnippet).to.be.a('boolean');
            expect(data.includeInSnippet).to.be(false);
            expect(data.temporary).to.be.a('boolean');
            expect(data.temporary).to.be(false);
            expect(data.maintainerId).to.be.a('string');
            expect(data.maintainerId).to.be("561c579cd8fd5c2704000001");
            {
              let dataCtr = data.tags;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.variations;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Variation);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("24b32dd3-0ba6-46ee-86af-230eebf3c7cb");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("True");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("The true variation");
                expect(data.value).to.be.a(Object);
                expect(data.value).to.be();

                      }
            }
            {
              let dataCtr = data.goalIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(23);
            {
              let dataCtr = data.customProperties;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.CustomProperty);
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My property");
                {
                  let dataCtr = data.value;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }

                      }
            }
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.maintainer).to.be.a(LaunchDarklyApi.Member);
                  expect(data.maintainer.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.maintainer.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.self.href).to.be.a('string');
                  expect(data.maintainer.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.self.type).to.be.a('string');
                  expect(data.maintainer.links.self.type).to.be("application/json");
                expect(data.maintainer.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.maintainer.links.next.href).to.be.a('string');
                  expect(data.maintainer.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.maintainer.links.next.type).to.be.a('string');
                  expect(data.maintainer.links.next.type).to.be("application/json");
              expect(data.maintainer.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.maintainer.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.maintainer.email).to.be.a('string');
              expect(data.maintainer.email).to.be("user@launchdarkly.com");
              expect(data.maintainer.firstName).to.be.a('string');
              expect(data.maintainer.firstName).to.be("Alan");
              expect(data.maintainer.lastName).to.be.a('string');
              expect(data.maintainer.lastName).to.be("Turing");
              expect(data.maintainer.verified).to.be.a('boolean');
              expect(data.maintainer.verified).to.be(false);
              expect(data.maintainer.pendingInvite).to.be.a('boolean');
              expect(data.maintainer.pendingInvite).to.be(false);
              expect(data.maintainer.isBeta).to.be.a('boolean');
              expect(data.maintainer.isBeta).to.be(false);
              {
                let dataCtr = data.maintainer.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.maintainer.lastSeen).to.be.a('number');
              expect(data.maintainer.lastSeen).to.be(1469326565348);
              expect(data.maintainer.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.maintainer.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.maintainer.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            {
              let dataCtr = data.environments;
              expect(dataCtr).to.be.an(Object);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.FeatureFlagConfig);
                expect(data.on).to.be.a('boolean');
                expect(data.on).to.be(false);
                expect(data.archived).to.be.a('boolean');
                expect(data.archived).to.be(false);
                expect(data.salt).to.be.a('string');
                expect(data.salt).to.be("YWx0ZXJuYXRlLnBhZ2U=");
                expect(data.sel).to.be.a('string');
                expect(data.sel).to.be("45501b9314dc4641841af774cb038b96");
                expect(data.lastModified).to.be.a('number');
                expect(data.lastModified).to.be(1469326565348);
                expect(data.version).to.be.a('number');
                expect(data.version).to.be(65);
                {
                  let dataCtr = data.targets;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Target);
                    {
                      let dataCtr = data.values;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("1461797806427-7-115540266", "00142875-a39d-4028-a3b7-987ccd151649");
                      }
                    }
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                {
                  let dataCtr = data.rules;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Rule);
                    expect(data.id).to.be.a('string');
                    expect(data.id).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
                    expect(data.trackEvents).to.be.a('boolean');
                    expect(data.trackEvents).to.be(false);
                    expect(data.rollout).to.be.a(LaunchDarklyApi.Rollout);
                          expect(data.rollout.bucketBy).to.be.a('string');
                      expect(data.rollout.bucketBy).to.be("");
                      {
                        let dataCtr = data.rollout.variations;
                        expect(dataCtr).to.be.an(Array);
                        expect(dataCtr).to.not.be.empty();
                        for (let p in dataCtr) {
                          let data = dataCtr[p];
                          expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                          expect(data.variation).to.be.a('number');
                          expect(data.variation).to.be(0);
                          expect(data.weight).to.be.a('number');
                          expect(data.weight).to.be(0);
          
                                }
                      }
                    {
                      let dataCtr = data.clauses;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.Clause);
                        expect(data.id).to.be.a('string');
                        expect(data.id).to.be("");
                        expect(data.attribute).to.be.a('string');
                        expect(data.attribute).to.be("groups");
                        expect(data.op).to.be.a('string');
                        expect(data.op).to.be("in");
                        {
                          let dataCtr = data.values;
                          expect(dataCtr).to.be.an(Array);
                          expect(dataCtr).to.not.be.empty();
                          for (let p in dataCtr) {
                            let data = dataCtr[p];
                            expect(data).to.be.a(Object);
                            expect(data).to.be("Top Customers");
                          }
                        }
                        expect(data.negate).to.be.a('boolean');
                        expect(data.negate).to.be(false);
        
                              }
                    }
                    expect(data.description).to.be.a('string');
                    expect(data.description).to.be("");
    
                          }
                }
                expect(data.fallthrough).to.be.a(LaunchDarklyApi.Fallthrough);
                      expect(data.fallthrough.variation).to.be.a('number');
                  expect(data.fallthrough.variation).to.be(0);
                  expect(data.fallthrough.rollout).to.be.a(LaunchDarklyApi.Rollout);
                        expect(data.fallthrough.rollout.bucketBy).to.be.a('string');
                    expect(data.fallthrough.rollout.bucketBy).to.be("");
                    {
                      let dataCtr = data.fallthrough.rollout.variations;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a(LaunchDarklyApi.WeightedVariation);
                        expect(data.variation).to.be.a('number');
                        expect(data.variation).to.be(0);
                        expect(data.weight).to.be.a('number');
                        expect(data.weight).to.be(0);
        
                              }
                    }
                expect(data.offVariation).to.be.a('number');
                expect(data.offVariation).to.be(0);
                {
                  let dataCtr = data.prerequisites;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Prerequisite);
                    expect(data.key).to.be.a('string');
                    expect(data.key).to.be("");
                    expect(data.variation).to.be.a('number');
                    expect(data.variation).to.be(0);
    
                          }
                }
                expect(data.trackEvents).to.be.a('boolean');
                expect(data.trackEvents).to.be(false);
                expect(data.trackEventsFallthrough).to.be.a('boolean');
                expect(data.trackEventsFallthrough).to.be(true);
                expect(data.site).to.be.a(LaunchDarklyApi.Site);
                      expect(data.site.href).to.be.a('string');
                  expect(data.site.href).to.be("/features/sort.order");
                  expect(data.site.type).to.be.a('string');
                  expect(data.site.type).to.be("text/html");
                expect(data.environmentName).to.be.a('string');
                expect(data.environmentName).to.be("");

                      }
            }
            expect(data.archivedDate).to.be.a('number');
            expect(data.archivedDate).to.be(1443652232590);
            expect(data.archived).to.be.a('boolean');
            expect(data.archived).to.be(false);
            expect(data.clientSideAvailability).to.be.a(LaunchDarklyApi.ClientSideAvailability);
                  expect(data.clientSideAvailability.usingEnvironmentId).to.be.a('boolean');
              expect(data.clientSideAvailability.usingEnvironmentId).to.be(false);
              expect(data.clientSideAvailability.usingMobileKey).to.be.a('boolean');
              expect(data.clientSideAvailability.usingMobileKey).to.be(false);
            expect(data.defaults).to.be.a(LaunchDarklyApi.Defaults);
                  expect(data.defaults.onVariation).to.be.a('number');
              expect(data.defaults.onVariation).to.be(0);
              expect(data.defaults.offVariation).to.be.a('number');
              expect(data.defaults.offVariation).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postFlagConfigScheduledChanges', function() {
        it('should call postFlagConfigScheduledChanges successfully', function(done) {
          // TODO: uncomment, update parameter values for postFlagConfigScheduledChanges call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var flagConfigScheduledChangesPostBody = new LaunchDarklyApi.FlagConfigScheduledChangesPostBody();
          flagConfigScheduledChangesPostBody.comment = "";
          flagConfigScheduledChangesPostBody.executionDate = 0;
          flagConfigScheduledChangesPostBody.instructions = new LaunchDarklyApi.SemanticPatchInstruction();
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";

          instance.postFlagConfigScheduledChanges(projectKey, flagConfigScheduledChangesPostBody, featureFlagKey, environmentKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.FeatureFlagScheduledChange);
            expect(data.executionDate).to.be.a('number');
            expect(data.executionDate).to.be(0);
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
    
            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postReviewApprovalRequest', function() {
        it('should call postReviewApprovalRequest successfully', function(done) {
          // TODO: uncomment, update parameter values for postReviewApprovalRequest call and complete the assertions
          /*
          var projectKey = "projectKey_example";
          var featureFlagKey = "featureFlagKey_example";
          var environmentKey = "environmentKey_example";
          var approvalRequestId = "approvalRequestId_example";
          var approvalRequestReviewConfigBody = new LaunchDarklyApi.ApprovalRequestReviewConfigBody();
          approvalRequestReviewConfigBody.kind = "approve";
          approvalRequestReviewConfigBody.comment = "This is a comment string";

          instance.postReviewApprovalRequest(projectKey, featureFlagKey, environmentKey, approvalRequestId, approvalRequestReviewConfigBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.ApprovalRequests);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.ApprovalRequest);
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    expect(data.version).to.be.a('number');
                expect(data.version).to.be(0);
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(0);
                expect(data.requestorId).to.be.a('string');
                expect(data.requestorId).to.be("");
                expect(data.reviewStatus).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                    expect(data.status).to.be.a('string');
                expect(data.status).to.be("pending");
                expect(data.appliedByMemberID).to.be.a('string');
                expect(data.appliedByMemberID).to.be("");
                expect(data.appliedDate).to.be.a('number');
                expect(data.appliedDate).to.be(0);
                {
                  let dataCtr = data.allReviews;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.ApprovalRequestReview);
                    expect(data.creationDate).to.be.a('number');
                    expect(data.creationDate).to.be(0);
                    expect(data.kind).to.be.a(LaunchDarklyApi.ApprovalRequestReviewStatus);
                        expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                        expect(data.id).to.be.a(LaunchDarklyApi.Id);
            
    
                          }
                }
                {
                  let dataCtr = data.notifyMemberIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.instructions).to.be.a(LaunchDarklyApi.SemanticPatchInstruction);
        

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
