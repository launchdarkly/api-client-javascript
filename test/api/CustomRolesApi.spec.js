/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.1.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.CustomRolesApi();
  });

  describe('(package)', function() {
    describe('CustomRolesApi', function() {
      describe('deleteCustomRole', function() {
        it('should call deleteCustomRole successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteCustomRole call
          /*
          var customRoleKey = "customRoleKey_example";

          instance.deleteCustomRole(customRoleKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCustomRole', function() {
        it('should call getCustomRole successfully', function(done) {
          // TODO: uncomment, update parameter values for getCustomRole call and complete the assertions
          /*
          var customRoleKey = "customRoleKey_example";

          instance.getCustomRole(customRoleKey, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.CustomRole);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("revenue team");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("revenue-team");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Description of revenue team role here");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getCustomRoles', function() {
        it('should call getCustomRoles successfully', function(done) {
          // TODO: uncomment getCustomRoles call and complete the assertions
          /*

          instance.getCustomRoles(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.CustomRoles);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.CustomRole);
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("revenue team");
                expect(data.key).to.be.a('string');
                expect(data.key).to.be("revenue-team");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("Description of revenue team role here");
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    {
                  let dataCtr = data.policy;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Policy);
                    {
                      let dataCtr = data.resources;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("proj/*:env/*:flag/my-flag");
                      }
                    }
                    {
                      let dataCtr = data.notResources;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("proj/*:env/*:flag/my-flag");
                      }
                    }
                    {
                      let dataCtr = data.actions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("updateOn");
                      }
                    }
                    {
                      let dataCtr = data.notActions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("updateOn");
                      }
                    }
                    expect(data.effect).to.be.a('string');
                    expect(data.effect).to.be("deny");
    
                          }
                }

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchCustomRole', function() {
        it('should call patchCustomRole successfully', function(done) {
          // TODO: uncomment, update parameter values for patchCustomRole call and complete the assertions
          /*
          var customRoleKey = "customRoleKey_example";
          var patchDelta = [new LaunchDarklyApi.PatchOperation()];
          patchDelta[0].op = "replace";
          patchDelta[0].path = "/name";
          patchDelta[0].value = "My resource name";

          instance.patchCustomRole(customRoleKey, patchDelta, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.CustomRole);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("revenue team");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("revenue-team");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Description of revenue team role here");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postCustomRole', function() {
        it('should call postCustomRole successfully', function(done) {
          // TODO: uncomment, update parameter values for postCustomRole call and complete the assertions
          /*
          var customRoleBody = new LaunchDarklyApi.CustomRoleBody();
          customRoleBody.name = "revenue team";
          customRoleBody.description = "Description of revenue team role here";
          customRoleBody.key = "revenue-team";
          customRoleBody.policy = [new LaunchDarklyApi.Policy()];
          customRoleBody.policy[0].resources = ["proj/*:env/*:flag/my-flag"];
          customRoleBody.policy[0].notResources = ["proj/*:env/*:flag/my-flag"];
          customRoleBody.policy[0].actions = ["updateOn"];
          customRoleBody.policy[0].notActions = ["updateOn"];
          customRoleBody.policy[0].effect = "deny";

          instance.postCustomRole(customRoleBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.CustomRole);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("revenue team");
            expect(data.key).to.be.a('string');
            expect(data.key).to.be("revenue-team");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("Description of revenue team role here");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
