/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.2
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.AccessTokensApi();
  });

  describe('(package)', function() {
    describe('AccessTokensApi', function() {
      describe('deleteToken', function() {
        it('should call deleteToken successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteToken call
          /*
          var tokenId = "tokenId_example";

          instance.deleteToken(tokenId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getToken', function() {
        it('should call getToken successfully', function(done) {
          // TODO: uncomment, update parameter values for getToken call and complete the assertions
          /*
          var tokenId = "tokenId_example";

          instance.getToken(tokenId, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Token);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.ownerId).to.be.a(LaunchDarklyApi.Id);
                expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                expect(data.member).to.be.a(LaunchDarklyApi.Member);
                  expect(data.member.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.member.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.self.href).to.be.a('string');
                  expect(data.member.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.self.type).to.be.a('string');
                  expect(data.member.links.self.type).to.be("application/json");
                expect(data.member.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.next.href).to.be.a('string');
                  expect(data.member.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.next.type).to.be.a('string');
                  expect(data.member.links.next.type).to.be("application/json");
              expect(data.member.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.member.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.member.email).to.be.a('string');
              expect(data.member.email).to.be("user@launchdarkly.com");
              expect(data.member.firstName).to.be.a('string');
              expect(data.member.firstName).to.be("Alan");
              expect(data.member.lastName).to.be.a('string');
              expect(data.member.lastName).to.be("Turing");
              expect(data.member.verified).to.be.a('boolean');
              expect(data.member.verified).to.be(false);
              expect(data.member.pendingInvite).to.be.a('boolean');
              expect(data.member.pendingInvite).to.be(false);
              expect(data.member.isBeta).to.be.a('boolean');
              expect(data.member.isBeta).to.be(false);
              {
                let dataCtr = data.member.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.member.lastSeen).to.be.a('number');
              expect(data.member.lastSeen).to.be(1469326565348);
              expect(data.member.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.member.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.member.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);
            expect(data.lastUsed).to.be.a('number');
            expect(data.lastUsed).to.be(1469326565348);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("3243");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My access token");
            expect(data.role).to.be.a('string');
            expect(data.role).to.be("writer");
            {
              let dataCtr = data.customRoleIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.inlineRole;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Statement);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("allow");

                      }
            }
            expect(data.serviceToken).to.be.a('boolean');
            expect(data.serviceToken).to.be(false);
            expect(data.defaultApiVersion).to.be.a('number');
            expect(data.defaultApiVersion).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getTokens', function() {
        it('should call getTokens successfully', function(done) {
          // TODO: uncomment, update parameter values for getTokens call and complete the assertions
          /*
          var opts = {};
          opts.showAll = true;

          instance.getTokens(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Tokens);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Token);
                expect(data.links).to.be.a(LaunchDarklyApi.Links);
                      expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.self.href).to.be.a('string');
                    expect(data.links.self.href).to.be("/api/v2/endpoint");
                    expect(data.links.self.type).to.be.a('string');
                    expect(data.links.self.type).to.be("application/json");
                  expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                        expect(data.links.next.href).to.be.a('string');
                    expect(data.links.next.href).to.be("/api/v2/endpoint");
                    expect(data.links.next.type).to.be.a('string');
                    expect(data.links.next.type).to.be("application/json");
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    expect(data.ownerId).to.be.a(LaunchDarklyApi.Id);
                    expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                    expect(data.member).to.be.a(LaunchDarklyApi.Member);
                      expect(data.member.links).to.be.a(LaunchDarklyApi.Links);
                        expect(data.member.links.self).to.be.a(LaunchDarklyApi.Link);
                          expect(data.member.links.self.href).to.be.a('string');
                      expect(data.member.links.self.href).to.be("/api/v2/endpoint");
                      expect(data.member.links.self.type).to.be.a('string');
                      expect(data.member.links.self.type).to.be("application/json");
                    expect(data.member.links.next).to.be.a(LaunchDarklyApi.Link);
                          expect(data.member.links.next.href).to.be.a('string');
                      expect(data.member.links.next.href).to.be("/api/v2/endpoint");
                      expect(data.member.links.next.type).to.be.a('string');
                      expect(data.member.links.next.type).to.be("application/json");
                  expect(data.member.id).to.be.a(LaunchDarklyApi.Id);
                      expect(data.member.role).to.be.a(LaunchDarklyApi.Role);
                      expect(data.member.email).to.be.a('string');
                  expect(data.member.email).to.be("user@launchdarkly.com");
                  expect(data.member.firstName).to.be.a('string');
                  expect(data.member.firstName).to.be("Alan");
                  expect(data.member.lastName).to.be.a('string');
                  expect(data.member.lastName).to.be("Turing");
                  expect(data.member.verified).to.be.a('boolean');
                  expect(data.member.verified).to.be(false);
                  expect(data.member.pendingInvite).to.be.a('boolean');
                  expect(data.member.pendingInvite).to.be(false);
                  expect(data.member.isBeta).to.be.a('boolean');
                  expect(data.member.isBeta).to.be(false);
                  {
                    let dataCtr = data.member.customRoles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(LaunchDarklyApi.Id);
      
                            }
                  }
                  expect(data.member.lastSeen).to.be.a('number');
                  expect(data.member.lastSeen).to.be(1469326565348);
                  expect(data.member.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                        expect(data.member.lastSeenMetadata.tokenId).to.be.a('string');
                    expect(data.member.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(1443652232590);
                expect(data.lastModified).to.be.a('number');
                expect(data.lastModified).to.be(1469326565348);
                expect(data.lastUsed).to.be.a('number');
                expect(data.lastUsed).to.be(1469326565348);
                expect(data.token).to.be.a('string');
                expect(data.token).to.be("3243");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My access token");
                expect(data.role).to.be.a('string');
                expect(data.role).to.be("writer");
                {
                  let dataCtr = data.customRoleIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                {
                  let dataCtr = data.inlineRole;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Statement);
                    {
                      let dataCtr = data.resources;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("proj/*:env/*:flag/my-flag");
                      }
                    }
                    {
                      let dataCtr = data.notResources;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("proj/*:env/*:flag/my-flag");
                      }
                    }
                    {
                      let dataCtr = data.actions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("updateOn");
                      }
                    }
                    {
                      let dataCtr = data.notActions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("updateOn");
                      }
                    }
                    expect(data.effect).to.be.a('string');
                    expect(data.effect).to.be("allow");
    
                          }
                }
                expect(data.serviceToken).to.be.a('boolean');
                expect(data.serviceToken).to.be(false);
                expect(data.defaultApiVersion).to.be.a('number');
                expect(data.defaultApiVersion).to.be(0);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchToken', function() {
        it('should call patchToken successfully', function(done) {
          // TODO: uncomment, update parameter values for patchToken call and complete the assertions
          /*
          var tokenId = "tokenId_example";
          var patchDelta = [new LaunchDarklyApi.PatchOperation()];
          patchDelta[0].op = "replace";
          patchDelta[0].path = "/name";
          patchDelta[0].value = "My resource name";

          instance.patchToken(tokenId, patchDelta, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Token);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.ownerId).to.be.a(LaunchDarklyApi.Id);
                expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                expect(data.member).to.be.a(LaunchDarklyApi.Member);
                  expect(data.member.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.member.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.self.href).to.be.a('string');
                  expect(data.member.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.self.type).to.be.a('string');
                  expect(data.member.links.self.type).to.be("application/json");
                expect(data.member.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.next.href).to.be.a('string');
                  expect(data.member.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.next.type).to.be.a('string');
                  expect(data.member.links.next.type).to.be("application/json");
              expect(data.member.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.member.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.member.email).to.be.a('string');
              expect(data.member.email).to.be("user@launchdarkly.com");
              expect(data.member.firstName).to.be.a('string');
              expect(data.member.firstName).to.be("Alan");
              expect(data.member.lastName).to.be.a('string');
              expect(data.member.lastName).to.be("Turing");
              expect(data.member.verified).to.be.a('boolean');
              expect(data.member.verified).to.be(false);
              expect(data.member.pendingInvite).to.be.a('boolean');
              expect(data.member.pendingInvite).to.be(false);
              expect(data.member.isBeta).to.be.a('boolean');
              expect(data.member.isBeta).to.be(false);
              {
                let dataCtr = data.member.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.member.lastSeen).to.be.a('number');
              expect(data.member.lastSeen).to.be(1469326565348);
              expect(data.member.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.member.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.member.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);
            expect(data.lastUsed).to.be.a('number');
            expect(data.lastUsed).to.be(1469326565348);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("3243");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My access token");
            expect(data.role).to.be.a('string');
            expect(data.role).to.be("writer");
            {
              let dataCtr = data.customRoleIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.inlineRole;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Statement);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("allow");

                      }
            }
            expect(data.serviceToken).to.be.a('boolean');
            expect(data.serviceToken).to.be(false);
            expect(data.defaultApiVersion).to.be.a('number');
            expect(data.defaultApiVersion).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postToken', function() {
        it('should call postToken successfully', function(done) {
          // TODO: uncomment, update parameter values for postToken call and complete the assertions
          /*
          var tokenBody = new LaunchDarklyApi.TokenBody();
          tokenBody.name = "My access token";
          tokenBody.role = "writer";
          tokenBody.customRoleIds = [""];
          tokenBody.inlineRole = [new LaunchDarklyApi.Statement()];
          tokenBody.inlineRole[0].resources = ["proj/*:env/*:flag/my-flag"];
          tokenBody.inlineRole[0].notResources = ["proj/*:env/*:flag/my-flag"];
          tokenBody.inlineRole[0].actions = ["updateOn"];
          tokenBody.inlineRole[0].notActions = ["updateOn"];
          tokenBody.inlineRole[0].effect = "allow";
          tokenBody.serviceToken = false;
          tokenBody.defaultApiVersion = 0;

          instance.postToken(tokenBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Token);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.ownerId).to.be.a(LaunchDarklyApi.Id);
                expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                expect(data.member).to.be.a(LaunchDarklyApi.Member);
                  expect(data.member.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.member.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.self.href).to.be.a('string');
                  expect(data.member.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.self.type).to.be.a('string');
                  expect(data.member.links.self.type).to.be("application/json");
                expect(data.member.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.next.href).to.be.a('string');
                  expect(data.member.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.next.type).to.be.a('string');
                  expect(data.member.links.next.type).to.be("application/json");
              expect(data.member.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.member.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.member.email).to.be.a('string');
              expect(data.member.email).to.be("user@launchdarkly.com");
              expect(data.member.firstName).to.be.a('string');
              expect(data.member.firstName).to.be("Alan");
              expect(data.member.lastName).to.be.a('string');
              expect(data.member.lastName).to.be("Turing");
              expect(data.member.verified).to.be.a('boolean');
              expect(data.member.verified).to.be(false);
              expect(data.member.pendingInvite).to.be.a('boolean');
              expect(data.member.pendingInvite).to.be(false);
              expect(data.member.isBeta).to.be.a('boolean');
              expect(data.member.isBeta).to.be(false);
              {
                let dataCtr = data.member.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.member.lastSeen).to.be.a('number');
              expect(data.member.lastSeen).to.be(1469326565348);
              expect(data.member.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.member.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.member.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);
            expect(data.lastUsed).to.be.a('number');
            expect(data.lastUsed).to.be(1469326565348);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("3243");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My access token");
            expect(data.role).to.be.a('string');
            expect(data.role).to.be("writer");
            {
              let dataCtr = data.customRoleIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.inlineRole;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Statement);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("allow");

                      }
            }
            expect(data.serviceToken).to.be.a('boolean');
            expect(data.serviceToken).to.be(false);
            expect(data.defaultApiVersion).to.be.a('number');
            expect(data.defaultApiVersion).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('resetToken', function() {
        it('should call resetToken successfully', function(done) {
          // TODO: uncomment, update parameter values for resetToken call and complete the assertions
          /*
          var tokenId = "tokenId_example";
          var opts = {};
          opts.expiry = 789;

          instance.resetToken(tokenId, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.Token);
            expect(data.links).to.be.a(LaunchDarklyApi.Links);
                  expect(data.links.self).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.self.href).to.be.a('string');
                expect(data.links.self.href).to.be("/api/v2/endpoint");
                expect(data.links.self.type).to.be.a('string');
                expect(data.links.self.type).to.be("application/json");
              expect(data.links.next).to.be.a(LaunchDarklyApi.Link);
                    expect(data.links.next.href).to.be.a('string');
                expect(data.links.next.href).to.be("/api/v2/endpoint");
                expect(data.links.next.type).to.be.a('string');
                expect(data.links.next.type).to.be("application/json");
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.ownerId).to.be.a(LaunchDarklyApi.Id);
                expect(data.memberId).to.be.a(LaunchDarklyApi.Id);
                expect(data.member).to.be.a(LaunchDarklyApi.Member);
                  expect(data.member.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.member.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.self.href).to.be.a('string');
                  expect(data.member.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.self.type).to.be.a('string');
                  expect(data.member.links.self.type).to.be("application/json");
                expect(data.member.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.member.links.next.href).to.be.a('string');
                  expect(data.member.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.member.links.next.type).to.be.a('string');
                  expect(data.member.links.next.type).to.be("application/json");
              expect(data.member.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.member.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.member.email).to.be.a('string');
              expect(data.member.email).to.be("user@launchdarkly.com");
              expect(data.member.firstName).to.be.a('string');
              expect(data.member.firstName).to.be("Alan");
              expect(data.member.lastName).to.be.a('string');
              expect(data.member.lastName).to.be("Turing");
              expect(data.member.verified).to.be.a('boolean');
              expect(data.member.verified).to.be(false);
              expect(data.member.pendingInvite).to.be.a('boolean');
              expect(data.member.pendingInvite).to.be(false);
              expect(data.member.isBeta).to.be.a('boolean');
              expect(data.member.isBeta).to.be(false);
              {
                let dataCtr = data.member.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.member.lastSeen).to.be.a('number');
              expect(data.member.lastSeen).to.be(1469326565348);
              expect(data.member.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.member.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.member.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);
            expect(data.lastUsed).to.be.a('number');
            expect(data.lastUsed).to.be(1469326565348);
            expect(data.token).to.be.a('string');
            expect(data.token).to.be("3243");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My access token");
            expect(data.role).to.be.a('string');
            expect(data.role).to.be("writer");
            {
              let dataCtr = data.customRoleIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.inlineRole;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Statement);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("allow");

                      }
            }
            expect(data.serviceToken).to.be.a('boolean');
            expect(data.serviceToken).to.be(false);
            expect(data.defaultApiVersion).to.be.a('number');
            expect(data.defaultApiVersion).to.be(0);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
