/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.2
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LaunchDarklyApi.RelayProxyConfigurationsApi();
  });

  describe('(package)', function() {
    describe('RelayProxyConfigurationsApi', function() {
      describe('deleteRelayProxyConfig', function() {
        it('should call deleteRelayProxyConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for deleteRelayProxyConfig call
          /*
          var id = "id_example";

          instance.deleteRelayProxyConfig(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRelayProxyConfig', function() {
        it('should call getRelayProxyConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for getRelayProxyConfig call and complete the assertions
          /*
          var id = "id_example";

          instance.getRelayProxyConfig(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.RelayProxyConfig);
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.creator).to.be.a(LaunchDarklyApi.Member);
                  expect(data.creator.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.creator.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.self.href).to.be.a('string');
                  expect(data.creator.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.self.type).to.be.a('string');
                  expect(data.creator.links.self.type).to.be("application/json");
                expect(data.creator.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.next.href).to.be.a('string');
                  expect(data.creator.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.next.type).to.be.a('string');
                  expect(data.creator.links.next.type).to.be("application/json");
              expect(data.creator.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.creator.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.creator.email).to.be.a('string');
              expect(data.creator.email).to.be("user@launchdarkly.com");
              expect(data.creator.firstName).to.be.a('string');
              expect(data.creator.firstName).to.be("Alan");
              expect(data.creator.lastName).to.be.a('string');
              expect(data.creator.lastName).to.be("Turing");
              expect(data.creator.verified).to.be.a('boolean');
              expect(data.creator.verified).to.be(false);
              expect(data.creator.pendingInvite).to.be.a('boolean');
              expect(data.creator.pendingInvite).to.be(false);
              expect(data.creator.isBeta).to.be.a('boolean');
              expect(data.creator.isBeta).to.be(false);
              {
                let dataCtr = data.creator.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.creator.lastSeen).to.be.a('number');
              expect(data.creator.lastSeen).to.be(1469326565348);
              expect(data.creator.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.creator.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.creator.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My relay proxy config");
            {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }
            expect(data.fullKey).to.be.a('string');
            expect(data.fullKey).to.be("rel-8a3a773d-b75e-48eb-a850-492cda9266eo");
            expect(data.displayKey).to.be.a('string');
            expect(data.displayKey).to.be("66eo");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('getRelayProxyConfigs', function() {
        it('should call getRelayProxyConfigs successfully', function(done) {
          // TODO: uncomment getRelayProxyConfigs call and complete the assertions
          /*

          instance.getRelayProxyConfigs(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.RelayProxyConfigs);
            {
              let dataCtr = data.items;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.RelayProxyConfig);
                expect(data.id).to.be.a(LaunchDarklyApi.Id);
                    expect(data.creator).to.be.a(LaunchDarklyApi.Member);
                      expect(data.creator.links).to.be.a(LaunchDarklyApi.Links);
                        expect(data.creator.links.self).to.be.a(LaunchDarklyApi.Link);
                          expect(data.creator.links.self.href).to.be.a('string');
                      expect(data.creator.links.self.href).to.be("/api/v2/endpoint");
                      expect(data.creator.links.self.type).to.be.a('string');
                      expect(data.creator.links.self.type).to.be("application/json");
                    expect(data.creator.links.next).to.be.a(LaunchDarklyApi.Link);
                          expect(data.creator.links.next.href).to.be.a('string');
                      expect(data.creator.links.next.href).to.be("/api/v2/endpoint");
                      expect(data.creator.links.next.type).to.be.a('string');
                      expect(data.creator.links.next.type).to.be("application/json");
                  expect(data.creator.id).to.be.a(LaunchDarklyApi.Id);
                      expect(data.creator.role).to.be.a(LaunchDarklyApi.Role);
                      expect(data.creator.email).to.be.a('string');
                  expect(data.creator.email).to.be("user@launchdarkly.com");
                  expect(data.creator.firstName).to.be.a('string');
                  expect(data.creator.firstName).to.be("Alan");
                  expect(data.creator.lastName).to.be.a('string');
                  expect(data.creator.lastName).to.be("Turing");
                  expect(data.creator.verified).to.be.a('boolean');
                  expect(data.creator.verified).to.be(false);
                  expect(data.creator.pendingInvite).to.be.a('boolean');
                  expect(data.creator.pendingInvite).to.be(false);
                  expect(data.creator.isBeta).to.be.a('boolean');
                  expect(data.creator.isBeta).to.be(false);
                  {
                    let dataCtr = data.creator.customRoles;
                    expect(dataCtr).to.be.an(Array);
                    expect(dataCtr).to.not.be.empty();
                    for (let p in dataCtr) {
                      let data = dataCtr[p];
                      expect(data).to.be.a(LaunchDarklyApi.Id);
      
                            }
                  }
                  expect(data.creator.lastSeen).to.be.a('number');
                  expect(data.creator.lastSeen).to.be(1469326565348);
                  expect(data.creator.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                        expect(data.creator.lastSeenMetadata.tokenId).to.be.a('string');
                    expect(data.creator.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
                expect(data.name).to.be.a('string');
                expect(data.name).to.be("My relay proxy config");
                {
                  let dataCtr = data.policy;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(LaunchDarklyApi.Policy);
                    {
                      let dataCtr = data.resources;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("proj/*:env/*:flag/my-flag");
                      }
                    }
                    {
                      let dataCtr = data.notResources;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("proj/*:env/*:flag/my-flag");
                      }
                    }
                    {
                      let dataCtr = data.actions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("updateOn");
                      }
                    }
                    {
                      let dataCtr = data.notActions;
                      expect(dataCtr).to.be.an(Array);
                      expect(dataCtr).to.not.be.empty();
                      for (let p in dataCtr) {
                        let data = dataCtr[p];
                        expect(data).to.be.a('string');
                        expect(data).to.be("updateOn");
                      }
                    }
                    expect(data.effect).to.be.a('string');
                    expect(data.effect).to.be("deny");
    
                          }
                }
                expect(data.fullKey).to.be.a('string');
                expect(data.fullKey).to.be("rel-8a3a773d-b75e-48eb-a850-492cda9266eo");
                expect(data.displayKey).to.be.a('string');
                expect(data.displayKey).to.be("66eo");
                expect(data.creationDate).to.be.a('number');
                expect(data.creationDate).to.be(1443652232590);
                expect(data.lastModified).to.be.a('number');
                expect(data.lastModified).to.be(1469326565348);

                      }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('patchRelayProxyConfig', function() {
        it('should call patchRelayProxyConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for patchRelayProxyConfig call and complete the assertions
          /*
          var id = "id_example";
          var patchDelta = [new LaunchDarklyApi.PatchOperation()];
          patchDelta[0].op = "replace";
          patchDelta[0].path = "/name";
          patchDelta[0].value = "My resource name";

          instance.patchRelayProxyConfig(id, patchDelta, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.RelayProxyConfig);
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.creator).to.be.a(LaunchDarklyApi.Member);
                  expect(data.creator.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.creator.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.self.href).to.be.a('string');
                  expect(data.creator.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.self.type).to.be.a('string');
                  expect(data.creator.links.self.type).to.be("application/json");
                expect(data.creator.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.next.href).to.be.a('string');
                  expect(data.creator.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.next.type).to.be.a('string');
                  expect(data.creator.links.next.type).to.be("application/json");
              expect(data.creator.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.creator.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.creator.email).to.be.a('string');
              expect(data.creator.email).to.be("user@launchdarkly.com");
              expect(data.creator.firstName).to.be.a('string');
              expect(data.creator.firstName).to.be("Alan");
              expect(data.creator.lastName).to.be.a('string');
              expect(data.creator.lastName).to.be("Turing");
              expect(data.creator.verified).to.be.a('boolean');
              expect(data.creator.verified).to.be(false);
              expect(data.creator.pendingInvite).to.be.a('boolean');
              expect(data.creator.pendingInvite).to.be(false);
              expect(data.creator.isBeta).to.be.a('boolean');
              expect(data.creator.isBeta).to.be(false);
              {
                let dataCtr = data.creator.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.creator.lastSeen).to.be.a('number');
              expect(data.creator.lastSeen).to.be(1469326565348);
              expect(data.creator.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.creator.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.creator.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My relay proxy config");
            {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }
            expect(data.fullKey).to.be.a('string');
            expect(data.fullKey).to.be("rel-8a3a773d-b75e-48eb-a850-492cda9266eo");
            expect(data.displayKey).to.be.a('string');
            expect(data.displayKey).to.be("66eo");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postRelayAutoConfig', function() {
        it('should call postRelayAutoConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for postRelayAutoConfig call and complete the assertions
          /*
          var relayProxyConfigBody = new LaunchDarklyApi.RelayProxyConfigBody();
          relayProxyConfigBody.name = "My relay proxy config";
          relayProxyConfigBody.policy = [new LaunchDarklyApi.Policy()];
          relayProxyConfigBody.policy[0].resources = ["proj/*:env/*:flag/my-flag"];
          relayProxyConfigBody.policy[0].notResources = ["proj/*:env/*:flag/my-flag"];
          relayProxyConfigBody.policy[0].actions = ["updateOn"];
          relayProxyConfigBody.policy[0].notActions = ["updateOn"];
          relayProxyConfigBody.policy[0].effect = "deny";

          instance.postRelayAutoConfig(relayProxyConfigBody, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.RelayProxyConfig);
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.creator).to.be.a(LaunchDarklyApi.Member);
                  expect(data.creator.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.creator.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.self.href).to.be.a('string');
                  expect(data.creator.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.self.type).to.be.a('string');
                  expect(data.creator.links.self.type).to.be("application/json");
                expect(data.creator.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.next.href).to.be.a('string');
                  expect(data.creator.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.next.type).to.be.a('string');
                  expect(data.creator.links.next.type).to.be("application/json");
              expect(data.creator.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.creator.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.creator.email).to.be.a('string');
              expect(data.creator.email).to.be("user@launchdarkly.com");
              expect(data.creator.firstName).to.be.a('string');
              expect(data.creator.firstName).to.be("Alan");
              expect(data.creator.lastName).to.be.a('string');
              expect(data.creator.lastName).to.be("Turing");
              expect(data.creator.verified).to.be.a('boolean');
              expect(data.creator.verified).to.be(false);
              expect(data.creator.pendingInvite).to.be.a('boolean');
              expect(data.creator.pendingInvite).to.be(false);
              expect(data.creator.isBeta).to.be.a('boolean');
              expect(data.creator.isBeta).to.be(false);
              {
                let dataCtr = data.creator.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.creator.lastSeen).to.be.a('number');
              expect(data.creator.lastSeen).to.be(1469326565348);
              expect(data.creator.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.creator.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.creator.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My relay proxy config");
            {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }
            expect(data.fullKey).to.be.a('string');
            expect(data.fullKey).to.be("rel-8a3a773d-b75e-48eb-a850-492cda9266eo");
            expect(data.displayKey).to.be.a('string');
            expect(data.displayKey).to.be("66eo");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('resetRelayProxyConfig', function() {
        it('should call resetRelayProxyConfig successfully', function(done) {
          // TODO: uncomment, update parameter values for resetRelayProxyConfig call and complete the assertions
          /*
          var id = "id_example";
          var opts = {};
          opts.expiry = 789;

          instance.resetRelayProxyConfig(id, opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(LaunchDarklyApi.RelayProxyConfig);
            expect(data.id).to.be.a(LaunchDarklyApi.Id);
                expect(data.creator).to.be.a(LaunchDarklyApi.Member);
                  expect(data.creator.links).to.be.a(LaunchDarklyApi.Links);
                    expect(data.creator.links.self).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.self.href).to.be.a('string');
                  expect(data.creator.links.self.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.self.type).to.be.a('string');
                  expect(data.creator.links.self.type).to.be("application/json");
                expect(data.creator.links.next).to.be.a(LaunchDarklyApi.Link);
                      expect(data.creator.links.next.href).to.be.a('string');
                  expect(data.creator.links.next.href).to.be("/api/v2/endpoint");
                  expect(data.creator.links.next.type).to.be.a('string');
                  expect(data.creator.links.next.type).to.be("application/json");
              expect(data.creator.id).to.be.a(LaunchDarklyApi.Id);
                  expect(data.creator.role).to.be.a(LaunchDarklyApi.Role);
                  expect(data.creator.email).to.be.a('string');
              expect(data.creator.email).to.be("user@launchdarkly.com");
              expect(data.creator.firstName).to.be.a('string');
              expect(data.creator.firstName).to.be("Alan");
              expect(data.creator.lastName).to.be.a('string');
              expect(data.creator.lastName).to.be("Turing");
              expect(data.creator.verified).to.be.a('boolean');
              expect(data.creator.verified).to.be(false);
              expect(data.creator.pendingInvite).to.be.a('boolean');
              expect(data.creator.pendingInvite).to.be(false);
              expect(data.creator.isBeta).to.be.a('boolean');
              expect(data.creator.isBeta).to.be(false);
              {
                let dataCtr = data.creator.customRoles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(LaunchDarklyApi.Id);
  
                        }
              }
              expect(data.creator.lastSeen).to.be.a('number');
              expect(data.creator.lastSeen).to.be(1469326565348);
              expect(data.creator.lastSeenMetadata).to.be.a(LaunchDarklyApi.MemberLastSeenMetadata);
                    expect(data.creator.lastSeenMetadata.tokenId).to.be.a('string');
                expect(data.creator.lastSeenMetadata.tokenId).to.be("5fd2a1ee05600316d5cb3e96");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("My relay proxy config");
            {
              let dataCtr = data.policy;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(LaunchDarklyApi.Policy);
                {
                  let dataCtr = data.resources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.notResources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("proj/*:env/*:flag/my-flag");
                  }
                }
                {
                  let dataCtr = data.actions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                {
                  let dataCtr = data.notActions;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("updateOn");
                  }
                }
                expect(data.effect).to.be.a('string');
                expect(data.effect).to.be("deny");

                      }
            }
            expect(data.fullKey).to.be.a('string');
            expect(data.fullKey).to.be("rel-8a3a773d-b75e-48eb-a850-492cda9266eo");
            expect(data.displayKey).to.be.a('string');
            expect(data.displayKey).to.be("66eo");
            expect(data.creationDate).to.be.a('number');
            expect(data.creationDate).to.be(1443652232590);
            expect(data.lastModified).to.be.a('number');
            expect(data.lastModified).to.be(1469326565348);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
