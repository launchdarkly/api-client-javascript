/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.0.2
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FeatureFlag', function() {
      beforeEach(function() {
        instance = new LaunchDarklyApi.FeatureFlag();
      });

      it('should create an instance of FeatureFlag', function() {
        // TODO: update the code to test FeatureFlag
        expect(instance).to.be.a(LaunchDarklyApi.FeatureFlag);
      });

      it('should have the property key (base name: "key")', function() {
        // TODO: update the code to test the property key
        expect(instance).to.have.property('key');
        // expect(instance.key).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property kind (base name: "kind")', function() {
        // TODO: update the code to test the property kind
        expect(instance).to.have.property('kind');
        // expect(instance.kind).to.be(expectedValueLiteral);
      });

      it('should have the property creationDate (base name: "creationDate")', function() {
        // TODO: update the code to test the property creationDate
        expect(instance).to.have.property('creationDate');
        // expect(instance.creationDate).to.be(expectedValueLiteral);
      });

      it('should have the property includeInSnippet (base name: "includeInSnippet")', function() {
        // TODO: update the code to test the property includeInSnippet
        expect(instance).to.have.property('includeInSnippet');
        // expect(instance.includeInSnippet).to.be(expectedValueLiteral);
      });

      it('should have the property temporary (base name: "temporary")', function() {
        // TODO: update the code to test the property temporary
        expect(instance).to.have.property('temporary');
        // expect(instance.temporary).to.be(expectedValueLiteral);
      });

      it('should have the property maintainerId (base name: "maintainerId")', function() {
        // TODO: update the code to test the property maintainerId
        expect(instance).to.have.property('maintainerId');
        // expect(instance.maintainerId).to.be(expectedValueLiteral);
      });

      it('should have the property tags (base name: "tags")', function() {
        // TODO: update the code to test the property tags
        expect(instance).to.have.property('tags');
        // expect(instance.tags).to.be(expectedValueLiteral);
      });

      it('should have the property variations (base name: "variations")', function() {
        // TODO: update the code to test the property variations
        expect(instance).to.have.property('variations');
        // expect(instance.variations).to.be(expectedValueLiteral);
      });

      it('should have the property goalIds (base name: "goalIds")', function() {
        // TODO: update the code to test the property goalIds
        expect(instance).to.have.property('goalIds');
        // expect(instance.goalIds).to.be(expectedValueLiteral);
      });

      it('should have the property version (base name: "_version")', function() {
        // TODO: update the code to test the property version
        expect(instance).to.have.property('version');
        // expect(instance.version).to.be(expectedValueLiteral);
      });

      it('should have the property customProperties (base name: "customProperties")', function() {
        // TODO: update the code to test the property customProperties
        expect(instance).to.have.property('customProperties');
        // expect(instance.customProperties).to.be(expectedValueLiteral);
      });

      it('should have the property links (base name: "_links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property maintainer (base name: "_maintainer")', function() {
        // TODO: update the code to test the property maintainer
        expect(instance).to.have.property('maintainer');
        // expect(instance.maintainer).to.be(expectedValueLiteral);
      });

      it('should have the property environments (base name: "environments")', function() {
        // TODO: update the code to test the property environments
        expect(instance).to.have.property('environments');
        // expect(instance.environments).to.be(expectedValueLiteral);
      });

      it('should have the property archivedDate (base name: "archivedDate")', function() {
        // TODO: update the code to test the property archivedDate
        expect(instance).to.have.property('archivedDate');
        // expect(instance.archivedDate).to.be(expectedValueLiteral);
      });

      it('should have the property archived (base name: "archived")', function() {
        // TODO: update the code to test the property archived
        expect(instance).to.have.property('archived');
        // expect(instance.archived).to.be(expectedValueLiteral);
      });

      it('should have the property clientSideAvailability (base name: "clientSideAvailability")', function() {
        // TODO: update the code to test the property clientSideAvailability
        expect(instance).to.have.property('clientSideAvailability');
        // expect(instance.clientSideAvailability).to.be(expectedValueLiteral);
      });

      it('should have the property defaults (base name: "defaults")', function() {
        // TODO: update the code to test the property defaults
        expect(instance).to.have.property('defaults');
        // expect(instance.defaults).to.be(expectedValueLiteral);
      });

    });
  });

}));
