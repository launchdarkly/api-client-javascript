/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Clause', function() {
      beforeEach(function() {
        instance = new LaunchDarklyApi.Clause();
      });

      it('should create an instance of Clause', function() {
        // TODO: update the code to test Clause
        expect(instance).to.be.a(LaunchDarklyApi.Clause);
      });

      it('should have the property id (base name: "_id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property attribute (base name: "attribute")', function() {
        // TODO: update the code to test the property attribute
        expect(instance).to.have.property('attribute');
        // expect(instance.attribute).to.be(expectedValueLiteral);
      });

      it('should have the property op (base name: "op")', function() {
        // TODO: update the code to test the property op
        expect(instance).to.have.property('op');
        // expect(instance.op).to.be(expectedValueLiteral);
      });

      it('should have the property values (base name: "values")', function() {
        // TODO: update the code to test the property values
        expect(instance).to.have.property('values');
        // expect(instance.values).to.be(expectedValueLiteral);
      });

      it('should have the property negate (base name: "negate")', function() {
        // TODO: update the code to test the property negate
        expect(instance).to.have.property('negate');
        // expect(instance.negate).to.be(expectedValueLiteral);
      });

    });
  });

}));
