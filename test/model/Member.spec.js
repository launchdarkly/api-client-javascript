/*
 * LaunchDarkly REST API
 * Build custom integrations with the LaunchDarkly REST API
 *
 * OpenAPI spec version: 5.3.0
 * Contact: support@launchdarkly.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.17
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LaunchDarklyApi);
  }
}(this, function(expect, LaunchDarklyApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Member', function() {
      beforeEach(function() {
        instance = new LaunchDarklyApi.Member();
      });

      it('should create an instance of Member', function() {
        // TODO: update the code to test Member
        expect(instance).to.be.a(LaunchDarklyApi.Member);
      });

      it('should have the property links (base name: "_links")', function() {
        // TODO: update the code to test the property links
        expect(instance).to.have.property('links');
        // expect(instance.links).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "_id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property role (base name: "role")', function() {
        // TODO: update the code to test the property role
        expect(instance).to.have.property('role');
        // expect(instance.role).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "firstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "lastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property verified (base name: "_verified")', function() {
        // TODO: update the code to test the property verified
        expect(instance).to.have.property('verified');
        // expect(instance.verified).to.be(expectedValueLiteral);
      });

      it('should have the property pendingInvite (base name: "_pendingInvite")', function() {
        // TODO: update the code to test the property pendingInvite
        expect(instance).to.have.property('pendingInvite');
        // expect(instance.pendingInvite).to.be(expectedValueLiteral);
      });

      it('should have the property isBeta (base name: "isBeta")', function() {
        // TODO: update the code to test the property isBeta
        expect(instance).to.have.property('isBeta');
        // expect(instance.isBeta).to.be(expectedValueLiteral);
      });

      it('should have the property customRoles (base name: "customRoles")', function() {
        // TODO: update the code to test the property customRoles
        expect(instance).to.have.property('customRoles');
        // expect(instance.customRoles).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeen (base name: "_lastSeen")', function() {
        // TODO: update the code to test the property lastSeen
        expect(instance).to.have.property('lastSeen');
        // expect(instance.lastSeen).to.be(expectedValueLiteral);
      });

      it('should have the property lastSeenMetadata (base name: "_lastSeenMetadata")', function() {
        // TODO: update the code to test the property lastSeenMetadata
        expect(instance).to.have.property('lastSeenMetadata');
        // expect(instance.lastSeenMetadata).to.be(expectedValueLiteral);
      });

    });
  });

}));
